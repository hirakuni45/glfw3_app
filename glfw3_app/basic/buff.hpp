#pragma once
//=====================================================================//
/*!	@file
	@brief	バッファ・クラス
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <cstdint>
#include <cstring>

namespace utils {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	標準的バッファ操作
		@param[in]	SIZE	バッファ・サイズ
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	template <uint16_t SIZE>
	class buff {
	public:
		typedef uint16_t	index_type;

	private:
		uint8_t		buff_[SIZE];

		uint16_t	front_;
		uint16_t	back_;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		buff() : front_(0), back_(SIZE) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	クリア・フロント
		*/
		//-----------------------------------------------------------------//
		void clear_front() { front_ = 0; }


		//-----------------------------------------------------------------//
		/*!
			@brief	クリア・バック
		*/
		//-----------------------------------------------------------------//
		void clear_back() { back_ = SIZE; }


		//-----------------------------------------------------------------//
		/*!
			@brief	全クリア
		*/
		//-----------------------------------------------------------------//
		void clear() {
			clear_front();
			clear_back();
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	フリー・サイズを返す
			@return フリー・サイズ
		*/
		//-----------------------------------------------------------------//
		uint16_t get_free() const { return back_ - front_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	フロント・サイズを返す
			@return フロント・サイズ
		*/
		//-----------------------------------------------------------------//
		uint16_t get_front_size() const { return front_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	バック・サイズを返す
			@return バック・サイズ
		*/
		//-----------------------------------------------------------------//
		uint16_t get_back_size() const { return SIZE - back_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	設定
			@param[in]	src	ブロックの先頭
			@param[in]	len	長さ
			@param[in]	dst	コピー先
		*/
		//-----------------------------------------------------------------//
		void set(const void* src, uint16_t len, uint16_t dst) {
			std::memcpy(&buff_[dst], src, len);
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	設定（１バイト）
			@param[in]	val	値
			@param[in]	dst	コピー先
		*/
		//-----------------------------------------------------------------//
		void set1(uint8_t val, uint16_t dst) {
			buff_[dst] = val;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	設定（２バイト）
			@param[in]	val	値
			@param[in]	dst	コピー先
		*/
		//-----------------------------------------------------------------//
		void set2(uint16_t val, uint16_t dst) {
			buff_[dst] = val & 0xff;
			buff_[dst + 1] = val >> 8;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	フロントをリサイズ
			@param[in]	len	長さ
		*/
		//-----------------------------------------------------------------//
		void resize_front(uint16_t len) {
			front_ = len;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	データの移動
			@param[in]	src	データの移動元
			@param[in]	dst	データの移動先
			@param[in]	len	長さ
		*/
		//-----------------------------------------------------------------//
		void move(uint16_t src, uint16_t dst, uint16_t len) {
			std::memmove(&buff_[dst], &buff_[src], len);
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	ポインターを取得
			@param[in]	pos	バッファの位置
			@return ポインターを取得
		*/
		//-----------------------------------------------------------------//
		const void* get(uint16_t pos) const {
			return &buff_[pos];
		} 


		//-----------------------------------------------------------------//
		/*!
			@brief	値を取得（１バイト）
			@param[in]	pos	バッファの位置
			@return 値
		*/
		//-----------------------------------------------------------------//
		uint8_t get1(uint16_t pos) const {
			return buff_[pos];
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	値を取得（２バイト）
			@param[in]	pos	バッファの位置
			@return 値
		*/
		//-----------------------------------------------------------------//
		uint16_t get2(uint16_t pos) const {
			uint16_t v = buff_[pos];
			v |= static_cast<uint16_t>(buff_[pos + 1]) << 8;
			return v;
		}
	};
}
