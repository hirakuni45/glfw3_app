#pragma once
//=====================================================================//
/*!	@file
	@brief	スタック・クラス
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <cstdint>

namespace utils {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	スタック・クラス
		@param[in]	PTYPE	ポインター・タイプ
		@param[in]	SIZE	バッファ・サイズ
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	template <typename PTYPE, uint16_t SIZE>
	class stack {
		PTYPE	pos_;
		uint8_t	buff_[SIZE];

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		stack() : pos_(0) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	クリア（初期状態に戻す）
		*/
		//-----------------------------------------------------------------//
		void clesr() { pos_ = 0; }


		//-----------------------------------------------------------------//
		/*!
			@brief	スタック・リミットを返す
			@return スタック・リミット
		*/
		//-----------------------------------------------------------------//
		PTYPE limit() const { return SIZE; }


		//-----------------------------------------------------------------//
		/*!
			@brief	スタックの深さを返す
			@return スタックの深さ
		*/
		//-----------------------------------------------------------------//
		PTYPE depth() const { pos_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	プッシュ
			@param[in]	src	ソース・ポインター
			@param[in]	len	長さ
		*/
		//-----------------------------------------------------------------//
		void push(const void* src, uint16_t len) {
			if((pos_ + len) > SIZE) return;
			std::memcpy(&buff_[pos_], src, len);
			pos_ += len;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	ポップ
			@param[in]	dst	ディストネーション・ポインター
			@param[in]	len	長さ
		*/
		//-----------------------------------------------------------------//
		void pop(void* dst, uint16_t len) {
			if(pos_ < len) return;
			std::memcpy(dst, &buff_[pos_], len);
			pos_ -= len;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	プッシュ（１バイト）
			@param[in]	v	値
		*/
		//-----------------------------------------------------------------//
		void push1(uint8_t v) {
			if((pos_ + 1) > SIZE) return;
			buff_[pos_] = v;
			++pos_;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	ポップ（１バイト）
			@param[in]	v	値
		*/
		//-----------------------------------------------------------------//
		uint16_t pop1() {
			if(pos_ < 1) return 0;
			--pos_;
			return buff_[pos_];
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	プッシュ（２バイト）
			@param[in]	v	値
		*/
		//-----------------------------------------------------------------//
		void push2(uint16_t v) {
			if((pos_ + 2) > SIZE) return;
			buff_[pos_] = v & 0xff;
			++pos_;
			buff_[pos_] = v >> 8;
			++pos_;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	ポップ（２バイト）
			@param[in]	v	値
		*/
		//-----------------------------------------------------------------//
		uint16_t pop2() {
			if(pos_ < 2) return 0;
			--pos_;
			uint16_t v = static_cast<uint16_t>(buff_[pos_]) << 8;
			--pos_;
			v |= static_cast<uint16_t>(buff_[pos_]);
			return v;
		}
	};
}
