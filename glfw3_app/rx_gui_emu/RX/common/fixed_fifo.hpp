#pragma once
//=====================================================================//
/*!	@file
	@brief	Fixed FIFO (first in first out) テンプレート
    @author 平松邦仁 (hira@rvf-rc45.net)
	@copyright	Copyright (C) 2017, 2020 Kunihito Hiramatsu @n
				Released under the MIT license @n
				https://github.com/hirakuni45/RX/blob/master/LICENSE
*/
//=====================================================================//
#include <cstdint>

namespace utils {

    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
    /*!
        @brief  固定サイズ FIFO クラス
		@param[in]	UNIT	基本形
		@param[in]	SIZE	バッファサイズ（最低２）
    */
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	template <class UNIT, uint32_t SIZE>
	class fixed_fifo {

		volatile uint32_t	get_;
		volatile uint32_t	put_;

		UNIT	buff_[SIZE];

	public:
        //-----------------------------------------------------------------//
        /*!
            @brief  コンストラクター
        */
        //-----------------------------------------------------------------//
		fixed_fifo() noexcept : get_(0), put_(0) { }


        //-----------------------------------------------------------------//
        /*!
            @brief  バッファのサイズを返す
			@return	バッファのサイズ
        */
        //-----------------------------------------------------------------//
		inline uint32_t size() const noexcept { return SIZE; }


        //-----------------------------------------------------------------//
        /*!
            @brief  長さを返す
			@return	長さ
        */
        //-----------------------------------------------------------------//
		uint32_t length() const noexcept {
			if(put_ >= get_) return (put_ - get_);
			else return (SIZE + put_ - get_);
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  クリア
        */
        //-----------------------------------------------------------------//
		inline void clear() noexcept { get_ = put_ = 0; }


        //-----------------------------------------------------------------//
        /*!
            @brief  値の格納参照を得る
			@param[in]	ofs	オフセット（格納領域を超えたオフセットは未定義）
			@return 値の格納参照
        */
        //-----------------------------------------------------------------//
		inline UNIT& put_at(uint32_t ofs = 0) noexcept {
			return buff_[(put_ + ofs) % SIZE];
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  値の格納ポイントの移動
        */
        //-----------------------------------------------------------------//
		inline void put_go() noexcept {
			volatile auto put = put_;
			++put;
			if(put >= SIZE) {
				put = 0;
			}
			put_ = put;
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  値の格納
			@param[in]	v	値
        */
        //-----------------------------------------------------------------//
		void put(const UNIT& v) noexcept {
			buff_[put_] = v;
			put_go();
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  値の取得参照を得る
			@param[in]	ofs	オフセット（格納領域を超えたオフセットは未定義）
			@return	値の取得参照
        */
        //-----------------------------------------------------------------//
		inline const UNIT& get_at(uint32_t ofs = 0) const noexcept {
			return buff_[(get_ + ofs) % SIZE];
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  値の取得
        */
        //-----------------------------------------------------------------//
		inline void get_go() noexcept {
			volatile auto get = get_;
			++get;
			if(get >= SIZE) {
				get = 0;
			}
			get_ = get;
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  値の取得
			@return	値
        */
        //-----------------------------------------------------------------//
		UNIT get() noexcept {
			UNIT v = buff_[get_];
			get_go();
			return v;
		}


        //-----------------------------------------------------------------//
        /*!
            @brief  get 位置を返す
			@return	位置
        */
        //-----------------------------------------------------------------//
		inline uint16_t pos_get() const noexcept { return get_; }


        //-----------------------------------------------------------------//
        /*!
            @brief  put 位置を返す
			@return	位置
        */
        //-----------------------------------------------------------------//
		inline uint16_t pos_put() const noexcept { return put_; }
	};
}
