#pragma once
//=====================================================================//
/*! @file
	@brief  BMC コア関係
	@author 平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <bitset>
#include "utils/string_utils.hpp"
#include "img_io/img_files.hpp"

namespace app {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief  BMC コア・クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class bmc_core {
	public:

		struct option {
			enum type {
				preview,
				verbose,
				true_color,
				inverse,
				bdf_type,
				dither,
				header,
				append,
				opterr,

				limit_
			};
		};

	private:
		std::bitset<option::limit_>	option_;
		std::string	inp_fname_;
		std::string out_fname_;

		int		argc_;
		char**	argv_;

		float	version_;

		img::img_files	img_files_;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief  コンストラクター
		*/
		//-----------------------------------------------------------------//
		bmc_core(int argc, char** argv) : argc_(argc), argv_(argv), version_(0.1f) { }


		//-----------------------------------------------------------------//
		/*!
			@brief  help 表示
		*/
		//-----------------------------------------------------------------//
		void help() const;


		//-----------------------------------------------------------------//
		/*!
			@brief  verbose 表示
		*/
		//-----------------------------------------------------------------//
		void verbose() const;


		//-----------------------------------------------------------------//
		/*!
			@brief  コマンドライン解析
			@return エラーが無ければ「true」
		*/
		//-----------------------------------------------------------------//
		bool analize();


		//-----------------------------------------------------------------//
		/*!
			@brief  実行
			@return エラーが無ければ「true」
		*/
		//-----------------------------------------------------------------//
		bool execute();


		//-----------------------------------------------------------------//
		/*!
			@brief  オプションの取得
			@param[in]	t	オプション・タイプ
			@return 状態
		*/
		//-----------------------------------------------------------------//
		bool get_option(option::type t) const { return option_[t]; }


		//-----------------------------------------------------------------//
		/*!
			@brief  入力ファイルの取得
			@return 入力ファイル名
		*/
		//-----------------------------------------------------------------//
		const std::string& get_inp_file() const { return inp_fname_; }


		//-----------------------------------------------------------------//
		/*!
			@brief  出力ファイルの取得
			@return 出力ファイル名
		*/
		//-----------------------------------------------------------------//
		const std::string& get_out_file() const { return out_fname_; }
	};
}
