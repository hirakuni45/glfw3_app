<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
<book id="LibtgaAPI">
 <bookinfo>
  <title>The Libtga 1.0.1 API Reference</title>
	
<legalnotice>
<blockquote><para>
      Copyright (c)  2002 Matthias Brueckner.
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      A copy of the license is included in the section <xref linkend="gfdl">.
</para></blockquote>

</legalnotice>

   <author>
    <firstname>Matthias</firstname>
    <surname>Brueckner</surname>
   </author>
  </bookinfo>

<chapter id="overview"><title>Overview</title>
<para>
Libtga is only a small library and thus has only a small API. Normally
a user program only has to call three functions for reading or writing
an image.
</para>
<para>
The first is TGAOpen() or TGAOpenFd(), respectively. These functions
both initialize and return a pointer to a TGA structure or NULL if any
error occurred. Additionally you can check the tga->last value.
For example:</para>
<programlisting>
{
        TGA *tga;
	TGAData data;

	tga = TGAOpen("image.tga", "r");
	if(!tga || tga->last != TGA_OK) {
	        /* error handling goes here */
	}
}
</programlisting>
<para>
Then a call to TGAReadImage() with the appropriate parameters
follows. This reads in the whole image at once (if you specify the
TGA_IMAGE_DATA flag). If you need to read the image in smaller chunks,
i.e. scanlines, you need to do things manually by calling
TGAReadHeader(), optionally TGAReadImageId() and TGAReadColorMap(),
and TGAReadImage(). (Of course you can also let TGAReadImage read the
header and the id and then call TGAReadScanlines().)
</para>
<programlisting>
	/* the TGA_IMAGE_ID tells the TGAReadImage() to read the image
	id, the TGA_IMAGE_DATA tells it to read the whole image data
	and any color map data if existing. NOTE: the image header is
	read always no matter what options were specified.
	At last we pass over the TGA_RGB flag so the returned data is
	in RGB format and not BGR */
	data->flags = TGA_IMAGE_DATA | TGA_IMAGE_ID | TGA_RGB;
	if(TGAReadImage(tga, & data) != TGA_OK) {
	     /* error handling goes here */
	}

	/* ... */
}
</programlisting>
<para>
At last close the file descriptor and free all memory:</para>
<programlisting>
	/* and finally cleanup */
	TGAClose(tga);

	/* NOTE: you must free the TGAData structure manually because
	   you probably want to use the data it contains after a call to 
	   TGAClose() 
        */
}
</programlisting>
</chapter>

<chapter id="data"><title>Data Types</title>
  <simplelist columns=1 type='horiz'>
    <member>tuint8, tbyte: 1 byte unsigned int</member>
    <member>tuint16, tshort: 2 byte unsigned integer</member>
    <member>tuint32, tlong, size_t: 4 byte unsigned integer</member>
  </simplelist>
</chapter>
     
<chapter id="structures"><title>Structures</title>
<refentry>
  <refmeta>
    <refentrytitle>
      <phrase id="API-struct-TGAHeader">TGAHeader</phrase>
    </refentrytitle>
   </refmeta>
   <refnamediv>
     <refname>TGAHeader</refname>
     <refpurpose>
       holds image header information, such as image width and height
     </refpurpose>
   </refnamediv>
   <refsynopsisdiv><title>Synopsis</title>
     <programlisting>
typedef struct _TGAHeader TGAHeader;

struct _TGAHeader {
        tbyte id_len;
	tbyte map_t;
	tbyte img_t;
	tshort map_first;
	tshort map_len;
	tbyte map_entry;
	tshort x;
	tshort y;
	tshort width;
	tshort height;
	tbyte depth;
	tbyte alpha;
	tbyte horz;
	tbyte vert;
};
     </programlisting>
   </refsynopsisdiv>
   <refsect1><title>Members</title>
     <variablelist>
       <varlistentry>  <term>id_len</term>
         <listitem><para>
	   Length in bytes of the image id field
         </para></listitem>
       </varlistentry>
       <varlistentry>  <term>map_t</term>
      	 <listitem><para>
           Indicates wether this image is color mapped (0 = no color map, 1 = has color map).
         </para></listitem>
       </varlistentry>
       <varlistentry>  <term>img_t<term>
      	  <listitem><para>
            Indicates the image type. Recognized values are
 	    <simplelist columns=1 type='horiz'>
	      <member>0 = no image data included</member>
	      <member>1 = color mapped</member>
	      <member>2 = grayscale</member>
	      <member>3 = true-color (RGB or RGBA)</member>
	      <member>9 = RLE encoded color mapped</member>
	      <member>10 = RLE encoded grayscale</member>
	      <member>11 = RLE encoded true-color</member>
	    </simplelist>
	    For image types 1 and 9 the <varname>map_t</varname> field must be 1.
           </para></listitem>
       </varlistentry>
       <varlistentry>  <term>map_first</term>
         <listitem><para>Index of the first color map entry</para></listitem>
       </varlistentry>
       <varlistentry>  <term>map_len</term>
         <listitem><para>
           Number of entries (colors) in the color map.
         </para></listitem>
       </varlistentry>
       <varlistentry>  <term>map_entry</term>
         <listitem><para>
           Color depth in bits of the color map entries (usualy 8, 16
           or 24)
         </para></listitem>
       </varlistentry>
       <varlistentry> <term>x</term>
      	 <listitem><para>
           x-Coordinate of the left corner of the image
         </para></listitem>
       </varlistentry>
       <varlistentry>  <term>y</term>
         <listitem><para>
           y-Coordinate of the upper corner of the image
       </para></listitem>
       </varlistentry>
       <varlistentry>  <term>width</term>
         <listitem><para>Width of the image in pixels</para></listitem>
       </varlistentry>
       <varlistentry>  <term>height</term>
         <listitem><para>Height of the image in pixels</para></listitem>
       </varlistentry>
       <varlistentry>  <term>depth</term>
         <listitem><para>
           Color depth of the pixels in bits (The TGA file format puts no limitations on this value, so any color depth would be possible. However 8, 24 and 32 are normally used).
      	 </para></listitem>
       </varlistentry>
         <varlistentry>	 <term>alpha</term>
      	   <listitem><para>
 	     number of alpha channel bits per pixel 
      	   </para></listitem>
       </varlistentry>
       <varlistentry>  <term>horz</term>
         <listitem><para>
	   horizontal orientation of the image (0 = left, 1 = right)
	 </para></listitem>
       </varlistentry>
       <varlistentry>  <term>vert</term>
	 <listitem><para>
	   vertical orientation of the image (0 = bottom, 1 = top)
	 </para></listitem>
       </varlistentry>
     </variablelist>
   </refsect1>
</refentry>

<refentry id="API-struct-TGAData">
  <refmeta>
    <refentrytitle>TGAData</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>TGAData</refname>
    <refpurpose>holds the image data</refpurpose>
  </refnamediv>
    <refsynopsisdiv><title>Synopsis</title>
      <programlisting>
typedef struct _TGAData TGAData;

struct _TGAData {
	tbyte	*img_id;
	tbyte	*cmap;
	tbyte	*img_data;
	tuint32  flags;
}; 
        </programlisting>
     </refsynopsisdiv>
   <refsect1><title>Members</title>
     <variablelist>
       <varlistentry>  <term>img_id</term>
         <listitem><para>image id data</para></listitem>
       </varlistentry>
       <varlistentry>  <term>cmap</term>
         <listitem><para>color map data</para></listitem>
       </varlistentry>
       <varlistentry>  <term>img_data<term>
         <listitem><para>actual image data</para></listitem>
       </varlistentry>
       <varlistentry>  <term>flags</term>
         <listitem><para>
	   flags that indicate what data fields should be read or written by the TGARead/WriteImage functions:
	   <simplelist columns=1 type='horiz'>
	     <member>TGA_IMAGE_ID</member>
	     <member>TGA_COLOR_MAP</member>
	     <member>TGA_IMAGE_DATA</member>
	   </simplelist>
	   after the functions return the flags indicate what sections actually were read/written. 
	 </para><para>
			Additionally flags are:
			<simplelist columns=1 type='horiz'>
			  <member>TGA_RGB - data returned by
			  function, or data passed to function,
			  respectively, is in RGB format</member>
			  <member>TGA_BGR - same as TGA_RGB but
			  now format is BGR instead of RGB</member>
			  <member>TGA_RLE_ENCODE - the data
			  should be encoded on write</member>
			</simplelist>
		      </para></listitem>
    		    </varlistentry>
  		  </variablelist>
	</refsect1>
</refentry>

<refentry>
	<refmeta>
		<refentrytitle><phrase id="API-struct-TGA">TGA</phrase></refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGA</refname>
		<refpurpose>holds library information</refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
<programlisting>
typedef struct _TGA TGA;

struct _TGA {
	FILE		*fd;
	tlong		off;
	int		last;
	TGAHeader	hdr;
	TGAErrorProc	error;
}; 
</programlisting>
	</refsynopsisdiv>
	<refsect1><title>Members</title>
   		<variablelist>
    		<varlistentry>	<term>fd</term>
  			<listitem><para>file descriptor (stream)</para></listitem>
    		</varlistentry>
		<varlistentry>	<term>off</term>
			<listitem><para>current offset in file</para></listitem>
		</varlistentry>
    		<varlistentry>	<term>last</term>
    			<listitem><para>
 				error code of the last error / warning that occured (<xref linkend="error">)
    			</para></listitem>
		</varlistentry>
		<varlistentry>	<term>hdr</term>
			<listitem><para>image header</para></listitem>
		</varlistentry>
		<varlistentry>	<term>error</term>
			<listitem><para>pointer to user-defined error handler</para></listitem>
		</varlistentry>
   		</variablelist>
	</refsect1>
</refentry>
</chapter>


<chapter id="error"><title>Error Handling</title>
<refentry>
	<refmeta>
		<refentrytitle><phrase id="Error-Overview">Overview</phrase></refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>Overview</refname>
		<refpurpose></refpurpose>
	</refnamediv>
	<refsect1><title>Description</title>
		<para>
			Libtga has a very simple error handling. If
			something goes wrong, the library functions
			call the macro <function>TGA_ERROR</function>
			(see <xref linkend="API-Macros">)with an appropriate error code. This macro prints out a short message to STDERR (via internal function TGAStrError()), sets TGA::last and returns. In case the user has defined an error handler this handler is called before.
		</para>
<para>On success the library functions set TGA::last to TGA_OK. So the user has generally to means of checking the library status: return value of the function and TGA::last.
</para>

</refsect1>
</refentry>

<refentry>
	<refmeta>
		<refentrytitle><phrase id="errcodes">Error codes</phrase></refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>Error codes</refname>
		<refpurpose>list of all currently recognized error codes</refpurpose>
	</refnamediv>
	<refsect1><title>Listing</title>
		<variablelist>
		<varlistentry>	<term><errortype>TGA_OK</errortype></term>
			<listitem><para>success</para></listitem>
		</varlistentry>
                <varlistentry>	<term><errortype>TGA_ERROR</errortype></term>
			<listitem><para>other error</para></listitem>
		</varlistentry>
		<varlistentry>	<term><errortype>TGA_OOM</errortype></term>
			<listitem><para>out of memory</para></listitem>
		</varlistentry>
		<varlistentry>	<term><errortype>TGA_OPEN_FAIL</errortype></term>
			<listitem><para>file open failed</para></listitem>
		</varlistentry>
		<varlistentry>	<term><errortype>TGA_SEEK_FAIL</errortype></term>
			<listitem><para>seek file failed</para></listitem>
		</varlistentry>
		<varlistentry>	<term><errortype>TGA_READ_FAIL</errortype></term>
			<listitem><para>read file failed</para></listitem>
		</varlistentry>
		<varlistentry>	<term><errortype>TGA_WRITE_FAIL</errortype></term>
			<listitem><para>write file failed</para></listitem>
		</varlistentry>
		<varlistentry>	<term><errortype>TGA_WARNING</errortype></term>
			<listitem><para>warning</para></listitem>
		</varlistentry>
		<varlistentry>
		<term><errortype>TGA_UNKNOWN_SUB_FORMAT</errortype></term>
		  <listitem><para>image has a not supported color
		  depth (bpp)</para></listitem>
		</varlistentry>
		</variablelist>
	</refsect1>
</refentry>
</chapter>


<chapter id="ic"><title>Init / Cleanup</title>

<refentry id="API-TGAOpen">
	<refmeta>
		<refentrytitle>TGAOpen</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGAOpen</refname>
		<refpurpose>open a TGA image file</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
		<title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>TGA* <function>TGAOpen</function></funcdef>
			<paramdef>char* <parameter>name</parameter></paramdef>
			<paramdef>char* <parameter>mode</parameter></paramdef>
		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>name</term>
			<listitem><para>name of file to be opened</para></listitem>
		</varlistentry>
		<varlistentry>	<term>mode</term>
			<listitem><para>access mode in wich to open file</para></listitem>
		</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
		<para>
		<function>TGAOpen</function> will open file <varname>name</varname> in the specified mode. See fopen(3) for details
		on the <varname>mode</varname> string. This is
		normally the first library function called by a user program.
		</para>
	</refsect1>
</refentry>

<refentry id="API-TGAOpenFd">
	<refmeta>
		<refentrytitle>TGAOpenFd</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGAOpenFd</refname>
		<refpurpose>use an already open file descriptor for
		input / output</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
		<title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>TGA* <function>TGAOpen</function></funcdef>
			<paramdef>FILE* <parameter>fd</parameter></paramdef>
		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>fd</term>
			<listitem><para>already open file descriptor
			to be used</para></listitem>
		</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
		<para>
		<function>TGAOpenFd</function> will use the supplied
		file descriptor to do input and output operations,
		instead of opening a file descriptor itself as <xref
		linkend="API-TGAOpen"> does.
		If the file descriptor is invalid the function
		produces a <errortype>TGA_OPEN_FAIL</errortype> error.
		</para>
	</refsect1>
</refentry>

<refentry id="API-TGAClose">
	<refmeta>
		<refentrytitle>TGAClose</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGAClose</refname>
		<refpurpose>close TGA file and do cleanup</refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>void <function>TGAClose</function></funcdef>
			<paramdef>TGA* <parameter>tga</parameter></paramdef>
		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>tga</term>
			<listitem><para>pointer to a valid TGA structure</para></listitem>
		</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
		<para>
                 Close TGA file(descriptor) and free all memory
                 This is in general the last library function called
                 by a user program.
		</para>
	</refsect1>
</refentry>

</chapter>

<chapter id="read"><title>Read</title>

<refentry id="API-TGAReadImage">
  <refmeta>
    <refentrytitle>TGAReadImage</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>TGAReadImage</refname>
    <refpurpose>read image</refpurpose>
  </refnamediv>
  <refsynopsisdiv><title>Synopsis</title>
    <funcsynopsis><funcprototype>
      <funcdef>int <function>TGAReadImage</function></funcdef>
      <paramdef>TGA* <parameter>tga</parameter></paramdef>
      <paramdef>TGAData* <parameter>data</parameter></paramdef>
    </funcprototype></funcsynopsis>
  </refsynopsisdiv>
  <refsect1><title>Arguments</title>
    <variablelist>
      <varlistentry> <term>tga</term>
        <listitem><para>pointer to valid TGA structure</para></listitem>
      </varlistentry>
      <varlistentry> <term>data</term>
        <listitem><para>
	  pointer to valid TGAData structure
	</para></listitem>
      </varlistentry>
    </variablelist>
   </refsect1>
   <refsect1><title>Description</title>
    <para>
      This function does all the work of reading a TGA image. It
      calles the <xref linkend="API-TGAReadHeader">, <xref
      linkend="API-TGAReadImageId">, <xref
      linkend="API-TGAReadColorMap"> and <xref
      linkend="API-TGAReadScanlines"> with the appropriate arguments
      to perform its task. So in most cases this is the only library
      function that needs to be called by the user to read an TGA
      image (besides <xref linkend="API-TGAOpen"> and <xref
      linkend="API-TGAClose"> functions of course).
      The color map data is read automatically if existing.
      I suggest using this function instead of the other TGARead*
      functions.</para><para>It returns <errortype>TGA_OK</errortype>
		on success.</para>
  </refsect1>
</refentry>

<refentry id="API-TGAReadHeader">
	<refmeta>
		<refentrytitle>TGAReadHeader</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGAReadHeader</refname>
		<refpurpose>read image header</refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>int <function>TGAReadHeader</function></funcdef>
			<paramdef>TGA* <parameter>tga</parameter></paramdef>
		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>tga</term>
			<listitem><para>pointer to valid TGA structure</para></listitem>
		</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
		<para>
			<function>TGAReadHeader</function> reads the image header. This function is normally called after 
			<function>TGAOpen</function> and before any
			other library routine. Use TGAReadImage() instead.
		</para><para>It returns <errortype>TGA_OK</errortype>
		on success.</para>
	</refsect1>
</refentry>

<refentry id="API-TGAReadImageId">
	<refmeta>
		<refentrytitle>TGAReadImageId</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGAReadImageId</refname>
		<refpurpose>read image id</refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>int <function>TGAReadImageId</function></funcdef>
			<paramdef>TGA* <parameter>tga</parameter></paramdef>
			<paramdef>tbyte** <parameter>id</parameter></paramdef>
		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>tga</term>
			<listitem><para>pointer to valid TGA structure</para></listitem>
		</varlistentry>
		<varlistentry>	<term>id</term>
			<listitem><para>
				reference to a NULL pointer that will hold the id data
			</para></listitem>
		</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
                <para>It returns <errortype>TGA_OK</errortype>
		on success.</para>
		<para>Use TGAReadImage() instead.</para>
	</refsect1>
</refentry>

<refentry  id="API-TGAReadColorMap">
	<refmeta>
		<refentrytitle>TGAReadColorMap</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGAReadColorMap</refname>
		<refpurpose>read color map</refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>int <function>TGAReadColorMap</function></funcdef>
		<paramdef>TGA* <parameter>tga</parameter></paramdef>
		<paramdef>tbyte**<parameter>cmap</parameter></paramdef>
		<paramdef>tuint32 <parameter>flags</parameter></paramdef>
		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>tga</term>
			<listitem><para>pointer to valid TGA structure</para></listitem>
		</varlistentry>
		<varlistentry>	<term>cmap</term>
			<listitem><para>reference to a NULL pointer that will hold the color map data</para></listitem>
		</varlistentry>
		<varlistentry> <term>flags</term>
			<listitem><para>
			  flags that control the functions operations
			  (currently only TGA_RGB or TGA_BGR <xref linkend="API-struct-TGAData">)
			</para></listitem>
		</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
	        <para>It returns TGA_CMAP_SIZE() on success.</para>
		<para>Use TGAReadImage() instead.</para>
	</refsect1>
</refentry>

<refentry id="API-TGAReadScanlines">
	<refmeta>
		<refentrytitle>TGAReadScanlines</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGAReadScanlines</refname>
		<refpurpose>read image data per scanline</refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>size_t <function>TGAReadScanlines</function></funcdef>
			<paramdef>TGA* <parameter>tga</parameter></paramdef>
			<paramdef>tbyte* <parameter>buf</parameter></paramdef>
			<paramdef>size_t <parameter>sln</parameter></paramdef>
			<paramdef>size_t <parameter>n</parameter></paramdef>			
			<paramdef>tuint32 <parameter>flags</parameter></paramdef>
		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>tga</term>
			<listitem><para>pointer to valid TGA structure</para></listitem>
		</varlistentry>
		<varlistentry>	<term>buf</term>
			<listitem><para>pointer that will hold the data (must be large enough)</para></listitem>
		</varlistentry>
		<varlistentry>	<term>sln</term>
			<listitem><para>the first scanline to be read (starts with 0)</para></listitem>
		</varlistentry>
		<varlistentry>	<term>n</term>
			<listitem><para>total number of scanlines to read (starting at sln)</para></listitem>
		</varlistentry>
		<varlistentry>	<term>flags</term>
			<listitem><para>
				currently only TGA_RGB or TGA_BGR
				possible (<xref linkend="API-struct-TGAData">)
			</para></listitem>
			
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
		<para>Returns number of scanlines actually read ( =
		<varname>n</varname> on success). This function
		transparently decodes any RLE data. So the returned
		data from this functions is always decoded. Use TGAReadImage() instead.</para>
	</refsect1>
</refentry>
</chapter>

<chapter id="write"><title>Write</title>

<refentry id="API-TGAWriteImage">
  <refmeta>
    <refentrytitle>TGAWriteImage</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>TGAWriteImage</refname>
    <refpurpose>write image</refpurpose>
  </refnamediv>
  <refsynopsisdiv><title>Synopsis</title>
    <funcsynopsis><funcprototype>
      <funcdef>int <function>TGAWriteImage</function></funcdef>
      <paramdef>TGA* <parameter>tga</parameter></paramdef>
      <paramdef>TGAData* <parameter>data</parameter></paramdef>
    </funcprototype></funcsynopsis>
  </refsynopsisdiv>
  <refsect1><title>Arguments</title>
    <variablelist>
      <varlistentry> <term>tga</term>
        <listitem><para>pointer to valid TGA structure</para></listitem>
      </varlistentry>
      <varlistentry> <term>data</term>
        <listitem><para>
	  pointer to valid TGAData structure
	</para></listitem>
      </varlistentry>
    </variablelist>
   </refsect1>
   <refsect1><title>Description</title>
    <para>
      This function does all the work of writing a TGA image. It
      calles the <xref linkend="API-TGAWriteHeader">, <xref
      linkend="API-TGAWriteImageId">, <xref
      linkend="API-TGAWriteColorMap"> and <xref
      linkend="API-TGAWriteScanlines"> with the appropriate arguments
      to perform its task. So in most cases this is the only library
      function that needs to be called by the user to write out an TGA
      image (besides <xref linkend="API-TGAOpen"> and <xref
      linkend="API-TGAClose"> functions of course).
      The color map data is read automatically is existing.
      I suggest using this function instead of the other TGAWrite*
      functions.
    </para><para>It returns <errortype>TGA_OK</errortype>
		on success.</para>
  </refsect1>
</refentry>

<refentry id="API-TGAWriteHeader">
	<refmeta>
		<refentrytitle>TGAWriteHeader</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGAWriteHeader</refname>
		<refpurpose>write image header</refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>int <function>TGAWriteHeader</function></funcdef>
			<paramdef>TGA*<parameter>tga</parameter></paramdef>

		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>tga</term>
			<listitem><para>pointer to valid TGA structure</para></listitem>
		</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
<para>It returns <errortype>TGA_OK</errortype>
		on success.</para>
		<para>Use TGAWriteImage() instead.</para>
	</refsect1>
</refentry>

<refentry id="API-TGAWriteImageId">
	<refmeta>
		<refentrytitle>TGAWriteImageId</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGAWriteImageId</refname>
		<refpurpose>write image id</refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>int <function>TGAWriteImageId</function></funcdef>
			<paramdef>TGA* <parameter>tga</parameter></paramdef>
			<paramdef>const tbyte* <parameter>id</parameter></paramdef>
		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>tga</term>
			<listitem><para>pointer to valid TGA structure</para></listitem>
		</varlistentry>
		<varlistentry>	<term>id</term>
			<listitem><para>pointer to image id data</para></listitem>
		</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
<para>It returns <errortype>TGA_OK</errortype>
		on success.</para>
		<para>Use TGAWriteImage() instead.</para>
	</refsect1>
</refentry>

<refentry id="API-TGAWriteColorMap">
	<refmeta>
		<refentrytitle>TGAWriteColorMap</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGAWriteColorMap</refname>
		<refpurpose>write color map</refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>int <function>TGAWriteColorMap</function></funcdef>
			<paramdef>TGA* <parameter>tga</parameter></paramdef>
			<paramdef>tbyte* <parameter>cmap</parameter></paramdef>
			<paramdef>tuint32 <parameter>flags</parameter></paramdef>
		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>tga</term>
			<listitem><para>pointer to valid TGA structure</para></listitem>
		</varlistentry>
		<varlistentry>	<term>cmap</term>
			<listitem><para>pointer to color map data</para></listitem>
		</varlistentry>
		<varlistentry>  <term>flags</term>
			<listitem><para>
			  currently only TGA_RGB or TGA_BGR are
			  supported. If the data you pass to the
			  functions is in RGB format set flags to
			  TGA_RGB, otherwise to TGA_BGR. The write
			  functions (TGAWrite*) always write BGR data to
			  the file (<xref linkend="API-struct-TGAData">)
			</para></listitem>
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
                <para>It returns TGA_CMAP_SIZE(cmap) on success.</para>
		<para>Use TGAWriteImage() instead.</para>
	</refsect1>
</refentry>

<refentry id="API-TGAWriteScanlines">
	<refmeta>
		<refentrytitle>TGAWriteScanlines</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>TGAWriteScanlines</refname>
		<refpurpose>write image data per scanline</refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>size_t <function>TGAReadScanlines</function></funcdef>
			<paramdef>TGA* <parameter>tga</parameter></paramdef>
			<paramdef>const tbyte* <parameter>buf</parameter></paramdef>
			<paramdef>size_t <parameter>sln</parameter></paramdef>
			<paramdef>size_t <parameter>n</parameter></paramdef>
			<paramdef>tuint32  <parameter>flags</parameter></paramdef>
		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>tga</term>
			<listitem><para>pointer to valid TGA structure</para></listitem>
		</varlistentry>
		<varlistentry>	<term>buf</term>
			<listitem><para>pointer to scanline data</para></listitem>
		</varlistentry>
		<varlistentry>	<term>sln</term>
			<listitem><para>the first scanline that should be written</para></listitem>
		</varlistentry>
		<varlistentry>	<term>n</term>
			<listitem><para>total number of scanlines to write</para></listitem>
		</varlistentry>
		<varlistentry>  <term>format</term>
			<listitem><para>
				currently only TGA_RGB, TGA_BGR and
				TGA_RLE_ENCODE are supported (<xref
				linkend="API-struct-TGAData">)
			</para></listitem>
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
		<para>Returns number of scanlines actually written ( =
		<varname>n</varname> on success). Use TGAWriteImage() instead.</para>
	</refsect1>
</refentry>
</chapter>

<chapter id="misc"><title>Miscellaneous</title>
<refentry id="API-Macros">
	<refmeta>
		<refentrytitle>Macros</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>Macros</refname>
		<refpurpose></refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_HEADER_SIZE</function></funcdef>
			<paramdef></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_CMAP_SIZE</function></funcdef>
			<paramdef> <parameter>tga</parameter></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_CMAP_OFF</function></funcdef>
			<paramdef> <parameter>tga</parameter></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_IMG_DATA_SIZE</function></funcdef>
			<paramdef> <parameter>tga</parameter></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_IMG_DATA_OFF</function></funcdef>
			<paramdef> <parameter>tga</parameter></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_SCANLINE_SIZE</function></funcdef>
			<paramdef> <parameter>tga</parameter></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_ERROR</function></funcdef>
			<paramdef> <parameter>tga</parameter></paramdef>
			<paramdef> <parameter>code</parameter></paramdef>
		</funcprototype></funcsynopsis>
				
	</refsynopsisdiv>
	<refsect1><title>Arguments</title>
		<variablelist>
		<varlistentry>	<term>tga</term>
			<listitem><para>pointer to valid TGA structure</para></listitem>
		</varlistentry>
		<varlistentry>  <term>code</term>
		  <listitem><para>libtga error code</para></listitem>
		</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1><title>Description</title>
		<variablelist>
		<varlistentry>	<term><function>TGA_HEADER_SIZE</function> 
			<listitem><para>is defined as 18</para></listitem>
		</varlistentry>
		<varlistentry>	<term><function>TGA_CMAP_SIZE</function></term> 
			<listitem><para>returns the total length of the color map in bytes
			</para></listitem>
		</varlistentry>
		<varlistentry>	<term><function>TGA_CMAP_OFF</function></term>
			<listitem><para>returns the start offset of the color map data
			</para></listitem>
		</varlistentry>
		<varlistentry>	<term><function>TGA_IMG_DATA_SIZE</function></term>
			<listitem><para>returns the total length of the image data in bytes
			</para></listitem>
		</varlistentry>
		<varlistentry>	<term><function>TGA_IMG_DATA_OFF</function></term>
			<listitem><para>returns the start offset of the image data
			</para></listitem>
		</varlistentry>
		<varlistentry>	<term><function>TGA_SCANLINE_SIZE</function></term>
			<listitem><para>returns the length of a single scanline in bytes
			</para></listitem>
		</varlistentry>
		<varlistentry>  <term><function>TGA_ERROR</function></term>
			<listitem><para>
			  see <xref linkend="error">
                        </para></listitem>
		</variablelist>
	</refsect1>
</refentry>

<refentry id="API-Flags">
	<refmeta>
		<refentrytitle>Flags</refentrytitle>
	</refmeta>
	<refnamediv>
		<refname>Flags</refname>
		<refpurpose></refpurpose>
	</refnamediv>
	<refsynopsisdiv><title>Synopsis</title>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_IMAGE_ID</function></funcdef>
			<paramdef></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_IMAGE_INFO</function></funcdef>
			<paramdef></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_IMAGE_DATA</function></funcdef>
			<paramdef></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_COLOR_MAP</function></funcdef>
			<paramdef></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_LEFT</function></funcdef>
			<paramdef></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_RIGHT</function></funcdef>
			<paramdef></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_TOP</function></funcdef>
			<paramdef></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
			<funcdef>#define <function>TGA_BOTTOM</function></funcdef>
			<paramdef></paramdef>
		</funcprototype></funcsynopsis>
		<funcsynopsis><funcprototype>
		  <funcdef>#define
		  <function>TGA_RLE_ENCODE</function></funcdef>
		    <paramdef></paramdef>
		</funcprototype></funcsynopsis>
	</refsynopsisdiv>
	<refsect1><title>Description</title>
		<para></para>
	</refsect1>
</refentry>
</chapter>

<appendix id="gfdl">
<title>GNU Free Documentation License</title>
<!-- - GNU Project - Free Software Foundation (FSF) -->
<!-- LINK REV="made" HREF="mailto:webmasters@gnu.org" -->


  <!-- sect1>
    <title>GNU Free Documentation License</title -->

    <para>Version 1.1, March 2000</para>

    <blockquote>
      <para>Copyright (C) 2000  Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.</para>
    </blockquote>

  <sect1 label="0">
    <title>PREAMBLE</title>

    <para>The purpose of this License is to make a manual, textbook,
    or other written document "free" in the sense of freedom: to
    assure everyone the effective freedom to copy and redistribute it,
    with or without modifying it, either commercially or
    noncommercially.  Secondarily, this License preserves for the
    author and publisher a way to get credit for their work, while not
    being considered responsible for modifications made by
    others.</para>

    <para>This License is a kind of "copyleft", which means that
    derivative works of the document must themselves be free in the
    same sense.  It complements the GNU General Public License, which
    is a copyleft license designed for free software.</para>

    <para>We have designed this License in order to use it for manuals
    for free software, because free software needs free documentation:
    a free program should come with manuals providing the same
    freedoms that the software does.  But this License is not limited
    to software manuals; it can be used for any textual work,
    regardless of subject matter or whether it is published as a
    printed book.  We recommend this License principally for works
    whose purpose is instruction or reference.</para>
  </sect1>

  <sect1 label="1">
    <title>APPLICABILITY AND DEFINITIONS</title>

    <para>This License applies to any manual or other work that
    contains a notice placed by the copyright holder saying it can be
    distributed under the terms of this License.  The "Document",
    below, refers to any such manual or work.  Any member of the
    public is a licensee, and is addressed as "you".</para>

    <para>A "Modified Version" of the Document means any work
    containing the Document or a portion of it, either copied
    verbatim, or with modifications and/or translated into another
    language.</para>

    <para>A "Secondary Section" is a named appendix or a front-matter
    section of the Document that deals exclusively with the
    relationship of the publishers or authors of the Document to the
    Document's overall subject (or to related matters) and contains
    nothing that could fall directly within that overall subject.
    (For example, if the Document is in part a textbook of
    mathematics, a Secondary Section may not explain any mathematics.)
    The relationship could be a matter of historical connection with
    the subject or with related matters, or of legal, commercial,
    philosophical, ethical or political position regarding
    them.</para>

    <para>The "Invariant Sections" are certain Secondary Sections
    whose titles are designated, as being those of Invariant Sections,
    in the notice that says that the Document is released under this
    License.</para>

    <para>The "Cover Texts" are certain short passages of text that
    are listed, as Front-Cover Texts or Back-Cover Texts, in the
    notice that says that the Document is released under this
    License.</para>

    <para>A "Transparent" copy of the Document means a
    machine-readable copy, represented in a format whose specification
    is available to the general public, whose contents can be viewed
    and edited directly and straightforwardly with generic text
    editors or (for images composed of pixels) generic paint programs
    or (for drawings) some widely available drawing editor, and that
    is suitable for input to text formatters or for automatic
    translation to a variety of formats suitable for input to text
    formatters.  A copy made in an otherwise Transparent file format
    whose markup has been designed to thwart or discourage subsequent
    modification by readers is not Transparent.  A copy that is not
    "Transparent" is called "Opaque".</para>

    <para>Examples of suitable formats for Transparent copies include
    plain ASCII without markup, Texinfo input format, LaTeX input
    format, SGML or XML using a publicly available DTD, and
    standard-conforming simple HTML designed for human modification.
    Opaque formats include PostScript, PDF, proprietary formats that
    can be read and edited only by proprietary word processors, SGML
    or XML for which the DTD and/or processing tools are not generally
    available, and the machine-generated HTML produced by some word
    processors for output purposes only.</para>

    <para>The "Title Page" means, for a printed book, the title page
    itself, plus such following pages as are needed to hold, legibly,
    the material this License requires to appear in the title page.
    For works in formats which do not have any title page as such,
    "Title Page" means the text near the most prominent appearance of
    the work's title, preceding the beginning of the body of the
    text.</para>
  </sect1>

  <sect1 label="2">
    <title>VERBATIM COPYING</title>

    <para>You may copy and distribute the Document in any medium,
    either commercially or noncommercially, provided that this
    License, the copyright notices, and the license notice saying this
    License applies to the Document are reproduced in all copies, and
    that you add no other conditions whatsoever to those of this
    License.  You may not use technical measures to obstruct or
    control the reading or further copying of the copies you make or
    distribute.  However, you may accept compensation in exchange for
    copies.  If you distribute a large enough number of copies you
    must also follow the conditions in section 3.</para>

    <para>You may also lend copies, under the same conditions stated
    above, and you may publicly display copies.</para>
  </sect1>

  <sect1 label="3">
    <title>COPYING IN QUANTITY</title>

    <para>If you publish printed copies of the Document numbering more
    than 100, and the Document's license notice requires Cover Texts,
    you must enclose the copies in covers that carry, clearly and
    legibly, all these Cover Texts: Front-Cover Texts on the front
    cover, and Back-Cover Texts on the back cover.  Both covers must
    also clearly and legibly identify you as the publisher of these
    copies.  The front cover must present the full title with all
    words of the title equally prominent and visible.  You may add
    other material on the covers in addition.  Copying with changes
    limited to the covers, as long as they preserve the title of the
    Document and satisfy these conditions, can be treated as verbatim
    copying in other respects.</para>

    <para>If the required texts for either cover are too voluminous to
    fit legibly, you should put the first ones listed (as many as fit
    reasonably) on the actual cover, and continue the rest onto
    adjacent pages.</para>

    <para>If you publish or distribute Opaque copies of the Document
    numbering more than 100, you must either include a
    machine-readable Transparent copy along with each Opaque copy, or
    state in or with each Opaque copy a publicly-accessible
    computer-network location containing a complete Transparent copy
    of the Document, free of added material, which the general
    network-using public has access to download anonymously at no
    charge using public-standard network protocols.  If you use the
    latter option, you must take reasonably prudent steps, when you
    begin distribution of Opaque copies in quantity, to ensure that
    this Transparent copy will remain thus accessible at the stated
    location until at least one year after the last time you
    distribute an Opaque copy (directly or through your agents or
    retailers) of that edition to the public.</para>

    <para>It is requested, but not required, that you contact the
    authors of the Document well before redistributing any large
    number of copies, to give them a chance to provide you with an
    updated version of the Document.</para>
  </sect1>

  <sect1 label="4">
    <title>MODIFICATIONS</title>

    <para>You may copy and distribute a Modified Version of the
    Document under the conditions of sections 2 and 3 above, provided
    that you release the Modified Version under precisely this
    License, with the Modified Version filling the role of the
    Document, thus licensing distribution and modification of the
    Modified Version to whoever possesses a copy of it.  In addition,
    you must do these things in the Modified Version:</para>

    <orderedlist numeration="upperalpha">
      <listitem><para>Use in the Title Page
      (and on the covers, if any) a title distinct from that of the
      Document, and from those of previous versions (which should, if
      there were any, be listed in the History section of the
      Document).  You may use the same title as a previous version if
      the original publisher of that version gives permission.</para>
      </listitem>

      <listitem><para>List on the Title Page,
      as authors, one or more persons or entities responsible for
      authorship of the modifications in the Modified Version,
      together with at least five of the principal authors of the
      Document (all of its principal authors, if it has less than
      five).</para>
      </listitem>

      <listitem><para>State on the Title page
      the name of the publisher of the Modified Version, as the
      publisher.</para>
      </listitem>

      <listitem><para>Preserve all the
      copyright notices of the Document.</para>
      </listitem>

      <listitem><para>Add an appropriate
      copyright notice for your modifications adjacent to the other
      copyright notices.</para>
      </listitem>

      <listitem><para>Include, immediately
      after the copyright notices, a license notice giving the public
      permission to use the Modified Version under the terms of this
      License, in the form shown in the Addendum below.</para>
      </listitem>

      <listitem><para>Preserve in that license
      notice the full lists of Invariant Sections and required Cover
      Texts given in the Document's license notice.</para>
      </listitem>

      <listitem><para>Include an unaltered
      copy of this License.</para>
      </listitem>

      <listitem><para>Preserve the section
      entitled "History", and its title, and add to it an item stating
      at least the title, year, new authors, and publisher of the
      Modified Version as given on the Title Page.  If there is no
      section entitled "History" in the Document, create one stating
      the title, year, authors, and publisher of the Document as given
      on its Title Page, then add an item describing the Modified
      Version as stated in the previous sentence.</para>
      </listitem>

      <listitem><para>Preserve the network
      location, if any, given in the Document for public access to a
      Transparent copy of the Document, and likewise the network
      locations given in the Document for previous versions it was
      based on.  These may be placed in the "History" section.  You
      may omit a network location for a work that was published at
      least four years before the Document itself, or if the original
      publisher of the version it refers to gives permission.</para>
      </listitem>

      <listitem><para>In any section entitled
      "Acknowledgements" or "Dedications", preserve the section's
      title, and preserve in the section all the substance and tone of
      each of the contributor acknowledgements and/or dedications
      given therein.</para>
      </listitem>

      <listitem><para>Preserve all the
      Invariant Sections of the Document, unaltered in their text and
      in their titles.  Section numbers or the equivalent are not
      considered part of the section titles.</para>
      </listitem>

      <listitem><para>Delete any section
      entitled "Endorsements".  Such a section may not be included in
      the Modified Version.</para>
      </listitem>

      <listitem><para>Do not retitle any
      existing section as "Endorsements" or to conflict in title with
      any Invariant Section.</para>
      </listitem>
    </orderedlist>
    
    <para>If the Modified Version includes new front-matter sections
    or appendices that qualify as Secondary Sections and contain no
    material copied from the Document, you may at your option
    designate some or all of these sections as invariant.  To do this,
    add their titles to the list of Invariant Sections in the Modified
    Version's license notice.  These titles must be distinct from any
    other section titles.</para>

    <para>You may add a section entitled "Endorsements", provided it
    contains nothing but endorsements of your Modified Version by
    various parties--for example, statements of peer review or that
    the text has been approved by an organization as the authoritative
    definition of a standard.</para>

    <para>You may add a passage of up to five words as a Front-Cover
    Text, and a passage of up to 25 words as a Back-Cover Text, to the
    end of the list of Cover Texts in the Modified Version.  Only one
    passage of Front-Cover Text and one of Back-Cover Text may be
    added by (or through arrangements made by) any one entity.  If the
    Document already includes a cover text for the same cover,
    previously added by you or by arrangement made by the same entity
    you are acting on behalf of, you may not add another; but you may
    replace the old one, on explicit permission from the previous
    publisher that added the old one.</para>

    <para>The author(s) and publisher(s) of the Document do not by
    this License give permission to use their names for publicity for
    or to assert or imply endorsement of any Modified Version.</para>
  </sect1>

  <sect1 label="5">
    <title>COMBINING DOCUMENTS</title>

    <para>You may combine the Document with other documents released
    under this License, under the terms defined in section 4 above for
    modified versions, provided that you include in the combination
    all of the Invariant Sections of all of the original documents,
    unmodified, and list them all as Invariant Sections of your
    combined work in its license notice.</para>

    <para>The combined work need only contain one copy of this
    License, and multiple identical Invariant Sections may be replaced
    with a single copy.  If there are multiple Invariant Sections with
    the same name but different contents, make the title of each such
    section unique by adding at the end of it, in parentheses, the
    name of the original author or publisher of that section if known,
    or else a unique number.  Make the same adjustment to the section
    titles in the list of Invariant Sections in the license notice of
    the combined work.</para>

    <para>In the combination, you must combine any sections entitled
    "History" in the various original documents, forming one section
    entitled "History"; likewise combine any sections entitled
    "Acknowledgements", and any sections entitled "Dedications".  You
    must delete all sections entitled "Endorsements."</para>
  </sect1>

  <sect1 label="6">
    <title>COLLECTIONS OF DOCUMENTS</title>

    <para>You may make a collection consisting of the Document and
    other documents released under this License, and replace the
    individual copies of this License in the various documents with a
    single copy that is included in the collection, provided that you
    follow the rules of this License for verbatim copying of each of
    the documents in all other respects.</para>

    <para>You may extract a single document from such a collection,
    and distribute it individually under this License, provided you
    insert a copy of this License into the extracted document, and
    follow this License in all other respects regarding verbatim
    copying of that document.</para>
  </sect1>

  <sect1 label="7">
    <title>AGGREGATION WITH INDEPENDENT WORKS</title>
    
    <para>A compilation of the Document or its derivatives with other
    separate and independent documents or works, in or on a volume of
    a storage or distribution medium, does not as a whole count as a
    Modified Version of the Document, provided no compilation
    copyright is claimed for the compilation.  Such a compilation is
    called an "aggregate", and this License does not apply to the
    other self-contained works thus compiled with the Document, on
    account of their being thus compiled, if they are not themselves
    derivative works of the Document.</para>

    <para>If the Cover Text requirement of section 3 is applicable to
    these copies of the Document, then if the Document is less than
    one quarter of the entire aggregate, the Document's Cover Texts
    may be placed on covers that surround only the Document within the
    aggregate.  Otherwise they must appear on covers around the whole
    aggregate.</para>
  </sect1>

  <sect1 label="8">
    <title>TRANSLATION</title>

    <para>Translation is considered a kind of modification, so you may
    distribute translations of the Document under the terms of section
    4.  Replacing Invariant Sections with translations requires
    special permission from their copyright holders, but you may
    include translations of some or all Invariant Sections in addition
    to the original versions of these Invariant Sections.  You may
    include a translation of this License provided that you also
    include the original English version of this License.  In case of
    a disagreement between the translation and the original English
    version of this License, the original English version will
    prevail.</para>
  </sect1>

  <sect1 label="9">
    <title>TERMINATION</title>
    
    <para>You may not copy, modify, sublicense, or distribute the
    Document except as expressly provided for under this License.  Any
    other attempt to copy, modify, sublicense or distribute the
    Document is void, and will automatically terminate your rights
    under this License.  However, parties who have received copies, or
    rights, from you under this License will not have their licenses
    terminated so long as such parties remain in full
    compliance.</para>
  </sect1>

  <sect1 label="10">
    <title>FUTURE REVISIONS OF THIS LICENSE</title>

    <para>The Free Software Foundation may publish new, revised
    versions of the GNU Free Documentation License from time to time.
    Such new versions will be similar in spirit to the present
    version, but may differ in detail to address new problems or
    concerns.  See <ulink
    url="http://www.gnu.org/copyleft/">http://www.gnu.org/copyleft/</ulink>.</para>

    <para>Each version of the License is given a distinguishing
    version number.  If the Document specifies that a particular
    numbered version of this License "or any later version" applies to
    it, you have the option of following the terms and conditions
    either of that specified version or of any later version that has
    been published (not as a draft) by the Free Software Foundation.
    If the Document does not specify a version number of this License,
    you may choose any version ever published (not as a draft) by the
    Free Software Foundation.</para>
  </sect1>

  <sect1 label="">
    <title>How to use this License for your documents</title>

    <para>To use this License in a document you have written, include
    a copy of the License in the document and put the following
    copyright and license notices just after the title page:</para>

<blockquote><para>
      Copyright (c)  YEAR  YOUR NAME.
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with the Invariant Sections being LIST THEIR TITLES, with the
      Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
      A copy of the license is included in the section entitled "GNU
      Free Documentation License".
</para></blockquote>

    <para>If you have no Invariant Sections, write "with no Invariant
    Sections" instead of saying which ones are invariant.  If you have
    no Front-Cover Texts, write "no Front-Cover Texts" instead of
    "Front-Cover Texts being LIST"; likewise for Back-Cover
    Texts.</para>

    <para>If your document contains nontrivial examples of program
    code, we recommend releasing these examples in parallel under your
    choice of free software license, such as the GNU General Public
    License, to permit their use in free software.</para>
  </sect1>

</appendix>

</book>


