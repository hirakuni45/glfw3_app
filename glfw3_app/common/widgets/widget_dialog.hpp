#pragma once
//=====================================================================//
/*!	@file
	@brief	GUI widget_dialog クラス（ヘッダー）@n
			Copyright 2017 Kunihito Hiramatsu
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include "widgets/widget_director.hpp"
#include "widgets/widget_button.hpp"
#include "widgets/widget_text.hpp"

namespace gui {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	GUI widget_dialog クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	struct widget_dialog : public widget {

		typedef widget_dialog value_type;

		typedef std::function< void (bool ok) > select_func_type;

		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	widget_dialog パラメーター
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		struct param {
			plate_param		plate_param_;
			color_param		color_param_;

			struct style {
				enum type {
					OK,			///< OK ボタンのみ
					CANCEL_OK,	///< キャンセル、OKボタン
				};
			};
			style::type		style_;		///< ダイアログ・スタイル
			vtx::irect		text_area_;	///< テキスト表示エリア

			bool			return_ok_;
			bool			return_cancel_;

			select_func_type	select_func_;

			param(style::type t = style::OK) : plate_param_(),
				color_param_(widget_director::default_dialog_color_),
				style_(t),
				text_area_(vtx::ipos(8), vtx::ipos(0)),
				return_ok_(false), return_cancel_(false)
			{ }
		};

	private:
		widget_director&	wd_;

		param				param_;

		gl::mobj::handle	objh_;

		widget_text*		text_;
		widget_button*		ok_;
		widget_button*		cancel_;

		void destroy_();
	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		widget_dialog(widget_director& wd, const widget::param& wp, const param& p) :
			widget(wp), wd_(wd), param_(p), objh_(0),
			text_(0), ok_(0), cancel_(0)
		{ }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		virtual ~widget_dialog() { destroy_(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	型を取得
		*/
		//-----------------------------------------------------------------//
		type_id type() const { return get_type_id<value_type>(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	widget 型の基本名称を取得
			@return widget 型の基本名称
		*/
		//-----------------------------------------------------------------//
		const char* type_name() const { return "dialog"; }


		//-----------------------------------------------------------------//
		/*!
			@brief	ハイブリッド・ウィジェットのサイン
			@return ハイブリッド・ウィジェットの場合「true」を返す。
		*/
		//-----------------------------------------------------------------//
		bool hybrid() const { return true; }


		//-----------------------------------------------------------------//
		/*!
			@brief	個別パラメーターへの取得(ro)
			@return 個別パラメーター
		*/
		//-----------------------------------------------------------------//
		const param& get_local_param() const { return param_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	個別パラメーターへの取得
			@return 個別パラメーター
		*/
		//-----------------------------------------------------------------//
		param& at_local_param() { return param_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	有効・無効の設定
			@param[in]	f	無効にする場合「false」
		*/
		//-----------------------------------------------------------------//
		void enable(bool f = true) { wd_.enable(this, f, true); }


		//-----------------------------------------------------------------//
		/*!
			@brief	文書の設定
			@param[in]	text	文書
		*/
		//-----------------------------------------------------------------//
		void set_text(const std::string& text) {
			if(text_) {
				text_->at_local_param().text_param_.set_text(text);
			}
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	文書の取得
			@return	文書
		*/
		//-----------------------------------------------------------------//
		std::string get_text() const {
			std::string s;
			if(text_) {
				s = text_->get_local_param().text_param_.get_text();
			}
			return s;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	Ok ボタンを返す
			@return	Ok ボタン
		*/
		//-----------------------------------------------------------------//
		widget_button* ok_button() { return ok_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	Cancel ボタンを返す
			@return	Cancel ボタン
		*/
		//-----------------------------------------------------------------//
		widget_button* cancel_button() { return cancel_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	初期化
		*/
		//-----------------------------------------------------------------//
		void initialize();


		//-----------------------------------------------------------------//
		/*!
			@brief	アップデート
		*/
		//-----------------------------------------------------------------//
		void update();


		//-----------------------------------------------------------------//
		/*!
			@brief	サービス
		*/
		//-----------------------------------------------------------------//
		void service() { }


		//-----------------------------------------------------------------//
		/*!
			@brief	レンダリング
		*/
		//-----------------------------------------------------------------//
		void render();


		//-----------------------------------------------------------------//
		/*!
			@brief	状態のセーブ
			@param[in]	pre	プリファレンス参照
			@return エラーが無い場合「true」
		*/
		//-----------------------------------------------------------------//
		bool save(sys::preference& pre);


		//-----------------------------------------------------------------//
		/*!
			@brief	状態のロード
			@param[in]	pre	プリファレンス参照
			@return エラーが無い場合「true」
		*/
		//-----------------------------------------------------------------//
		bool load(const sys::preference& pre);
	};
}
