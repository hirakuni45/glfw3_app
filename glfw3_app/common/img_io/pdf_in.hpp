#pragma once
//=====================================================================//
/*!	@file
	@brief	PDF ファイル（入力のみ）を扱うクラス（ヘッダー）
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <string>
extern "C" {
#include <mupdf/fitz.h>
};
#include "img_io/i_img_io.hpp"
#include "img_io/img_rgba8.hpp"

namespace img {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	PDF ファイル・クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class pdf_in {
		fz_context*		context_;
		fz_document*	document_;
		fz_outline *	outline_;

		int				rotation_;
		vtx::spos		size_;

		std::string		doctitle_;

		int				page_count_;
		int				page_no_;
		int				page_current_;

		img_rgba8		img_;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		pdf_in() : context_(0), document_(0), outline_(0),
				   rotation_(0), size_(0),
				   page_count_(0), page_no_(0), page_current_(0) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~pdf_in() { destroy(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	初期化
		*/
		//-----------------------------------------------------------------//
		void initialize();


		//-----------------------------------------------------------------//
		/*!
			@brief	PDF ファイルを開く
			@param[in]	filename	ファイル名
			@return 正常にオープンできれば「true」
		*/
		//-----------------------------------------------------------------//
		bool open(const std::string& filename);


		//-----------------------------------------------------------------//
		/*!
			@brief	PDF ファイルを開く
			@param[in]	filename	ファイル名
			@return 正常にオープンできれば「true」
		*/
		//-----------------------------------------------------------------//
		bool open(const utils::wstring& filename) {
			std::string s;
			utils::utf16_to_utf8(filename, s);
			return open(s);
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	ドキュメント・タイトルを取得
			@return タイトル
		*/
		//-----------------------------------------------------------------//
		const std::string& get_document_title() const { return doctitle_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	ページを設定
			@param[in]	page	設定ページ
		*/
		//-----------------------------------------------------------------//
		void set_page(int page) { if(page >= 0 && page < page_count_) page_no_ = page; }


		//-----------------------------------------------------------------//
		/*!
			@brief	現在のページを取得
			@return 現在のページ
		*/
		//-----------------------------------------------------------------//
		int get_page() const { return page_no_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	前ページ
		*/
		//-----------------------------------------------------------------//
		void prev_page() { --page_no_; if(page_no_ < 0) page_no_ = 0; }


		//-----------------------------------------------------------------//
		/*!
			@brief	次ページ
		*/
		//-----------------------------------------------------------------//
		void next_page() { ++page_no_; if(page_no_ >= page_count_) page_no_ = page_count_ - 1; }


		//-----------------------------------------------------------------//
		/*!
			@brief	ページをレンダリングする
			@param[in]	size	レンダリングサイズ
			@return 正常終了なら「true」
		*/
		//-----------------------------------------------------------------//
		bool render(const vtx::spos& size);


		//-----------------------------------------------------------------//
		/*!
			@brief	PDF をクローズする
		*/
		//-----------------------------------------------------------------//
		void close();


		//-----------------------------------------------------------------//
		/*!
			@brief	PDF のページ数を取得
			@return 最大ページ数
		*/
		//-----------------------------------------------------------------//
		int get_page_limit() const { return page_count_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	画像の参照
			@return 画像のコンテキスト
		*/
		//-----------------------------------------------------------------//
		img::img_rgba8& at_img_rgba8() { return img_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	レンダリングされたビットマップを取得
			@return 画像のインターフェース・クラス
		*/
		//-----------------------------------------------------------------//
		const i_img* get_image_if() const { return &img_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	廃棄
		*/
		//-----------------------------------------------------------------//
		void destroy();

	};
}

