#pragma once
//=====================================================================//
/*!	@file
	@brief	画像ファイル入出力を扱うインターフェースクラス@n
			・「フォーマット固有の拡張文字列」とは？@n
			ロード、セーブ時に、付加する拡張機能を制御する為の文字列@n
			※仕様については、各クラスの説明を参照の事@n
			※一例として「jpeg セーブ時の圧縮品質を設定する」など
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <string>
#include "utils/file_io.hpp"
#include "i_img.hpp"

namespace img {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	画像ファイル・インターフェース・クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class i_img_io {

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	仮想デストラクター
		*/
		//-----------------------------------------------------------------//
		virtual ~i_img_io() { }


		//-----------------------------------------------------------------//
		/*!
			@brief	ファイル拡張子を返す
			@return ファイル拡張子の文字列
		*/
		//-----------------------------------------------------------------//
		virtual const char* get_file_ext() const = 0;


		//-----------------------------------------------------------------//
		/*!
			@brief	画像ファイルの適正を確認する
			@param[in]	fin	file_io クラス
			@return エラーなら「false」を返す
		*/
		//-----------------------------------------------------------------//
		virtual bool probe(utils::file_io& fin) = 0;


		//-----------------------------------------------------------------//
		/*!
			@brief	画像ファイルの情報を取得する
			@param[in]	fin	file_io クラス
			@param[in]	fo	情報を受け取る構造体
			@return エラーなら「false」を返す
		*/
		//-----------------------------------------------------------------//
		virtual bool info(utils::file_io& fin, img::img_info& fo) = 0;


		//-----------------------------------------------------------------//
		/*!
			@brief	画像ファイルロードして展開する
			@param[in]	fin	file_io クラス
			@param[in]	opt	フォーマット固有の拡張文字列
			@return エラーなら「false」を返す
		*/
		//-----------------------------------------------------------------//
		virtual bool load(utils::file_io& fin, const std::string& opt = "") = 0;


		//-----------------------------------------------------------------//
		/*!
			@brief	画像ファイルセーブする
			@param[in]	fout	file_io クラス
			@param[in]	opt	フォーマット固有の拡張文字列
			@return エラーなら「false」を返す
		*/
		//-----------------------------------------------------------------//
		virtual bool save(utils::file_io& fout, const std::string& opt = "") = 0;


		//-----------------------------------------------------------------//
		/*!
			@brief	イメージを取得
			@return	イメージ
		*/
		//-----------------------------------------------------------------//
		virtual const i_img* get_image() const = 0;


		//-----------------------------------------------------------------//
		/*!
			@brief	画像の登録
			@param[in]	simg	イメージ
		*/
		//-----------------------------------------------------------------//
		virtual void set_image(const i_img* img) = 0;

	};
}
