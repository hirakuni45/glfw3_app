#pragma once
//=====================================================================//
/*!	@file
	@brief	BDF フォント・ファイルを扱うクラス（ヘッダー）
    @author 平松邦仁 (hira@rvf-rc45.net)
	@copyright	Copyright (C) 2017 Kunihito Hiramatsu @n
				Released under the MIT license @n
				https://github.com/hirakuni45/glfw3_app/blob/master/LICENSE
*/
//=====================================================================//
#include <cstdint>
#include <string>
#include <vector>
#include "utils/bit_array.hpp"

namespace img {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	BDF フォントファイルの入力
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class bdf_io {

		uint32_t				lin_code_max_;
		std::vector<uint8_t>	sjis_pad_;

		uint16_t	jis_code_;
		bool		bitmap_;

		int		map_max_;

		uint32_t	jis_count_;
		uint32_t	lin_limit_;

		uint32_t	bbx_width_;
		uint32_t	bbx_height_;

		utils::bit_array	bit_array_;

///		bool	alignment_bits_;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		bdf_io() : lin_code_max_(0), jis_code_(0), bitmap_(false), map_max_(0),
			jis_count_(0), lin_limit_(0),
				   bbx_width_(0), bbx_height_(0) /* alignment_bits_(8) */ { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~bdf_io() { }


		//-----------------------------------------------------------------//
		/*!
			@brief	フォントの横幅の取得
			@return 横幅
		*/
		//-----------------------------------------------------------------//
		uint32_t get_width() const { return bbx_width_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	フォントの高さの取得
			@return 高さ
		*/
		//-----------------------------------------------------------------//
		uint32_t get_height() const { return bbx_height_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	フォント辺りのバイト数を取得
			@return バイト数
		*/
		//-----------------------------------------------------------------//
		uint32_t byte_size() const { return (bbx_width_ * bbx_height_ + 7) / 8; }


		//-----------------------------------------------------------------//
		/*!
			@brief	初期化
		*/
		//-----------------------------------------------------------------//
		void initialize();


		//-----------------------------------------------------------------//
		/*!
			@brief	ファイルの読み込み
			@param[in]	filename	ファイル名
			@return エラーが無ければ「true」
		*/
		//-----------------------------------------------------------------//
		bool load(const std::string& filename);


		//-----------------------------------------------------------------//
		/*!
			@brief	SJIS 順番によるバイナリー出力
			@param[in]	filename	ファイル名
			@return エラーが無ければ「true」
		*/
		//-----------------------------------------------------------------//
		bool save(const std::string& filename);


		//-----------------------------------------------------------------//
		/*!
			@brief	ビットデータ配列の最大サイズを返す
			@return 最大サイズ
		*/
		//-----------------------------------------------------------------//
		uint32_t size() const { return lin_limit_ * byte_size(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	ビットデータバイトアクセス
			@param[in]	idx	バイト位置
			@return データ
		*/
		//-----------------------------------------------------------------//
		uint8_t get_byte(uint32_t idx) const { return sjis_pad_[idx]; }

	};
}
