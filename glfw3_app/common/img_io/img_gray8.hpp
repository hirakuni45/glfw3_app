#pragma once
//=====================================================================//
/*!	@file
	@brief	グレー・スケール・イメージを扱うクラス（ヘッダー）
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <vector>
#include <boost/unordered_set.hpp>
#include <boost/foreach.hpp>
#include "img_io/i_img.hpp"

namespace img {


	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	8 ビット・グレースケールの画像を扱うクラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class img_gray8 : public i_img {

	private:
		vtx::spos	size_;

		std::vector<gray8>	img_;

		bool	alpha_;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		img_gray8() : size_(0), alpha_(false) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		virtual ~img_gray8() { }


		//-----------------------------------------------------------------//
		/*!
			@brief	イメージのタイプを得る。
			@return	イメージタイプ
		*/
		//-----------------------------------------------------------------//
		IMG::type get_type() const { return IMG::GRAY8; }


		//-----------------------------------------------------------------//
		/*!
			@brief	イメージを確保する
			@param[in]	width	横幅を指定
			@param[in]	height	高さを指定
			@param[in]	alpha	アルファチャネルを有効にする場合「true」
		*/
		//-----------------------------------------------------------------//
		void create(const vtx::spos& size, bool alpha = false) {
			img_.clear();
			size_ = size;
			img_.resize(size_.x * size_.y);
			alpha_ = alpha;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	カラー・ルック・アップ・テーブルを設定
			@param[in]	idx	テーブルの位置
			@param[in]	c	設定するカラー
		*/
		//-----------------------------------------------------------------//
		void put_clut(int idx, const rgba8& c) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	カラー・ルック・アップ・テーブルを得る
			@param[in]	idx	テーブルの位置
			@param[in]	c	受け取るカラー参照ポイント
		*/
		//-----------------------------------------------------------------//
		void get_clut(int idx, rgba8& c) const { }


		//-----------------------------------------------------------------//
		/*!
			@brief	イメージに点を描画
			@param[in]	x	描画位置Ｘ
			@param[in]	y	描画位置Ｙ
			@param[in]	c	描画するカラー
			@return 領域なら「true」
		*/
		//-----------------------------------------------------------------//
		bool put_pixel(int x, int y, const idx8& c) { return false; }


		//-----------------------------------------------------------------//
		/*!
			@brief	イメージの点を得る
			@param[in]	x	描画位置Ｘ
			@param[in]	y	描画位置Ｙ
			@param[in]	c	描画されたカラーを受け取るリファレンス
			@return 領域なら「true」
		*/
		//-----------------------------------------------------------------//
		bool get_pixel(int x, int y, idx8& c) const { return false; }


		//-----------------------------------------------------------------//
		/*!
			@brief	イメージに点を描画
			@param[in]	x	描画位置Ｘ
			@param[in]	y	描画位置Ｙ
			@param[in]	c	描画するカラー
			@return 領域なら「true」
		*/
		//-----------------------------------------------------------------//
		bool put_pixel(int x, int y, const gray8& c) {
			if(x >= 0 && x < size_.x && y >= 0 && y < size_.y) {
				img_[size_.x * y + x] = c;
				return true;
			}
			return false;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	イメージに点を描画
			@param[in]	x	描画位置Ｘ
			@param[in]	y	描画位置Ｙ
			@param[in]	c	描画するカラー
		*/
		//-----------------------------------------------------------------//
		bool put_pixel(int x, int y, const rgba8& c) { return false; }


		//-----------------------------------------------------------------//
		/*!
			@brief	イメージの点を得る
			@param[in]	x	取得位置Ｘ
			@param[in]	y	取得位置Ｙ
			@param[out]	g	グレースケールを受け取るリファレンス
		*/
		//-----------------------------------------------------------------//
		bool get_pixel(int x, int y, gray8& g) const {
			if(x >= 0 && x < size_.x && y >= 0 && y < size_.y) {
				g = img_[size_.x * y + x];
				return true;
			}
			return false;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	イメージの点を得る
			@param[in]	x	描画位置Ｘ
			@param[in]	y	描画位置Ｙ
			@param[in]	c	描画されたカラーを受け取るリファレンス
		*/
		//-----------------------------------------------------------------//
		bool get_pixel(int x, int y, rgba8& c) const {
			if(x >= 0 && x < size_.x && y >= 0 && y < size_.y) {
				const gray8& g = img_[size_.x * y + x];
				c.r = c.g = c.b = g.g;
				c.a = 255;
				return true;
			}
			return false;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	イメージのポインターを得る。
			@brief	y イメージの高さ（省略すると先頭）
			@return	イメージのポインター
		*/
		//-----------------------------------------------------------------//
		const gray8* get_img(int y = 0) const {
			if(y >= 0 && y < size_.y) return &img_[size_.x * y]; else return 0;
		}


		const void* get_image() const { return static_cast<const void*>(&img_[0]); }


		//-----------------------------------------------------------------//
		/*!
			@brief	サイズを得る
			@return	サイズ
		*/
		//-----------------------------------------------------------------//
		const vtx::spos& get_size() const { return size_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	カラー・ルック・アップ・テーブルの最大数を返す
			@return	最大数
		*/
		//-----------------------------------------------------------------//
		int get_clut_max() const { return -1; }


		//-----------------------------------------------------------------//
		/*!
			@brief	アルファ・チャネルが有効か調べる
			@return	アルファ・チャネルが有効なら「true」
		*/
		//-----------------------------------------------------------------//
		bool test_alpha() const { return alpha_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	画像が「空」か検査する
			@return	「空」なら「true」
		*/
		//-----------------------------------------------------------------//
		bool empty() const { return img_.empty(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	利用している色数の総数をカウントする
			@return	利用している色数
		*/
		//-----------------------------------------------------------------//
		unsigned int count_color() const {
			boost::unordered_set<gray8> n;
			BOOST_FOREACH(const gray8& c, img_) {
				n.insert(c);
			}
#if 0
			std::set<gray8> n;
			for(std::vector<gray8>::const_iterator cit = img_.begin(); cit != img_.end(); ++cit) {
				n.insert(*cit);
			}
#endif
			return static_cast<unsigned int>(n.size());
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	描画色で埋める
			@param[in]	c	描画色
			@param[in]	sx	開始位置 X
			@param[in]	sy	開始位置 Y
			@param[in]	w	描画幅
			@param[in]	h	描画高さ
		*/
		//-----------------------------------------------------------------//
		void fill(const gray8& c, int sx, int sy, int w, int h) {
			for(int y = 0; y < h; ++y) {
				for(int x = 0; x < w; ++x) {
					put_pixel(sx + x, sy + y, c);
				}
			}
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	描画色で埋める
			@param[in]	c	描画色
		*/
		//-----------------------------------------------------------------//
		void fill(const gray8& c) {
			fill(c, 0, 0, size_.x, size_.y);
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	交換
			@param[in]	src	ソース・コンテキスト
		*/
		//-----------------------------------------------------------------//
		void swap(img_gray8& src) { *this = src; }


		//-----------------------------------------------------------------//
		/*!
			@brief	イメージを廃棄する
		*/
		//-----------------------------------------------------------------//
		void destroy() {
			size_.set(0);
			std::vector<gray8>().swap(img_);
		}

	};
}

