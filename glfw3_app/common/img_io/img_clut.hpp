#pragma once
//=====================================================================//
/*!	@file
	@brief	カラー・ルック・アップ・テーブル（ヘッダー）
    @author 平松邦仁 (hira@rvf-rc45.net)
	@copyright	Copyright (C) 2017 Kunihito Hiramatsu @n
				Released under the MIT license @n
				https://github.com/hirakuni45/glfw3_app/blob/master/LICENSE
*/
//=====================================================================//
#include "img.hpp"

namespace img {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	カラー・ルック・アップ・テーブル・クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	template <class COLOR = rgba8, uint32_t NUM = 256>
	class img_clut {

		uint32_t		clut_pos_;
		COLOR			clut_[NUM];
		bool			alpha_;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		img_clut() : clut_pos_(0), alpha_(true) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~img_clut() { }


		//-----------------------------------------------------------------//
		/*!
			@brief	容量を返す
			@return 容量
		*/
		//-----------------------------------------------------------------//
		uint32_t capacity() const { return NUM; }


		//-----------------------------------------------------------------//
		/*!
			@brief	要素数を返す
			@return 要素数
		*/
		//-----------------------------------------------------------------//
		uint32_t size() const { return clut_pos_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	カラーテーブルのクリア
		*/
		//-----------------------------------------------------------------//
		void clear() { clut_pos_ = 0; }


		//-----------------------------------------------------------------//
		/*!
			@brief	カラーテーブルの色情報を取り出す。
			@param[in]	pos	カラーテーブルの位置
			@param[in]	c	取り出したカラー情報に対するリファレンス
			@return	カラー情報を返した場合「true」
		*/
		//-----------------------------------------------------------------//
		const COLOR& get_color(uint32_t pos) const { return clut_[pos]; }


		//-----------------------------------------------------------------//
		/*!
			@brief	カラーテーブルの色情報を変更する
			@param[in]	pos	カラーテーブルの位置
			@param[in]	c	設定するカラー情報に対するリファレンス
			@return	カラー情報を変更した場合「true」
		*/
		//-----------------------------------------------------------------//
		bool set_color(uint32_t pos, const COLOR& c) {
			if(pos < clut_pos_) {
				clut_[pos] = c;
				return true;
			}
			return false;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	カラーテーブルにある色情報の検索
			@param[in]	c	検索するカラー情報に対するリファレンス
			@param[in]	pos	カラーが検索出来た場合の位置を返すリファレンス
			@return	適合するカラーがあった場合「true」
		*/
		//-----------------------------------------------------------------//
		bool lookup_color(const COLOR& c, int& pos) {
			for(uint32_t i = 0; i < clut_pos_; ++i) {
				if(clut_[i] == c) {
					pos = i;
					return true;
				}
			}
			return false;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	カラーを追加する
			@param[in]	c	検索するカラー情報に対するリファレンス
			@return	追加出来た場合「true」
		*/
		//-----------------------------------------------------------------//
		bool add_color(const rgba8& c) {
			if(clut_pos_ < NUM) {
				clut_[clut_pos_] = c;
				clut_pos_++;
				return true;
			}
			return false;
		}
	};
}
