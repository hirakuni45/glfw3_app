#pragma once
//=====================================================================//
/*!	@file
	@brief	カラー・ルック・アップ・テーブル（ヘッダー）
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include "img.hpp"

namespace img {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	カラー・ルック・アップ・テーブル・クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class img_clut {

		uint32_t		clut_max_;
		uint32_t		clut_pos_;
		rgba8			clut_[256];

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		img_clut() : clut_max_(256), clut_pos_(0) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~img_clut() { }


		//-----------------------------------------------------------------//
		/*!
			@brief	全てのカラーテーブルを廃棄する。
		*/
		//-----------------------------------------------------------------//
		void destroy() { clut_max_ = 256; clut_pos_ = 0; }


		//-----------------------------------------------------------------//
		/*!
			@brief	現在のカラー数を得る。
			@return カラー数を返す。
		*/
		//-----------------------------------------------------------------//
		uint32_t get_color_num() const { return clut_pos_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	カラーテーブルの色情報を取り出す。
			@param[in]	pos	カラーテーブルの位置
			@param[in]	c	取り出したカラー情報に対するリファレンス
			@return	カラー情報を返した場合「true」
		*/
		//-----------------------------------------------------------------//
		bool get_color(int pos, rgba8& c) const {
			if(pos < 0 || pos >= clut_pos_) return false;
			c = clut_[pos];
			return true;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	カラーテーブルの色情報を変更する
			@param[in]	pos	カラーテーブルの位置
			@param[in]	c	設定するカラー情報に対するリファレンス
			@return	カラー情報を変更した場合「true」
		*/
		//-----------------------------------------------------------------//
		bool set_color(int pos, const rgba8& c) {
			if(pos < 0 || pos >= clut_pos_) return false;
			clut_[pos] = c;
			return true;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	カラーテーブルにある色情報の検索
			@param[in]	c	検索するカラー情報に対するリファレンス
			@param[in]	pos	カラーが検索出来た場合の位置を返すリファレンス
			@return	適合するカラーがあった場合「true」
		*/
		//-----------------------------------------------------------------//
		bool lookup_color(const rgba8& c, int& pos) {
			for(int i = 0; i < clut_max_; ++i) {
				if(clut_[i] == c) {
					pos = i;
					return true;
				}
			}
			return false;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	カラーを追加する
			@param[in]	c	検索するカラー情報に対するリファレンス
			@return	追加出来た場合「true」
		*/
		//-----------------------------------------------------------------//
		bool add_color(const rgba8& c) {
			if(clut_pos_ < clut_max_) {
				clut_[clut_pos_] = c;
				clut_pos_++;
			}
			return false;
		}

	};

}
