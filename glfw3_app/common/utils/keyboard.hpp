#pragma once
//=====================================================================//
/*!	@file
	@brief	キーボード入力を扱うクラス（ヘッダー）
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <string>

namespace sys {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	キーボード・クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	struct keyboard {

		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	制御コード
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		struct ctrl {
			enum type {
				RIGHT = 'Q' - 0x40,
				LEFT  = 'R' - 0x40,
				DOWN  = 'S' - 0x40,
				UP    = 'T' - 0x40,
			};
		};


	private:
		std::string	input_;

		uint32_t	repeat_delay_;
		uint32_t	repeat_delay_cnt_;
		uint32_t	repeat_cycle_;
		uint32_t	repeat_cycle_cnt_;
		int			last_key_idx_;
		bool		repeat_enable_;
		char		last_char_;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		keyboard() : input_(),
			repeat_delay_(30), repeat_delay_cnt_(0),
			repeat_cycle_(3), repeat_cycle_cnt_(0), last_key_idx_(-1), repeat_enable_(true),
			last_char_(0) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~keyboard() { }


		//-----------------------------------------------------------------//
		/*!
			@brief	リピートの許可
			@param[in]	f	不許可の場合「false」
		*/
		//-----------------------------------------------------------------//
		void repeat_enable(bool f = true) { repeat_enable_ = f; }


		//-----------------------------------------------------------------//
		/*!
			@brief	リピート・遅延の設定
			@param[in]	frame	フレーム数
		*/
		//-----------------------------------------------------------------//
		void repeat_delay(uint32_t frame) { repeat_delay_ = frame; }


		//-----------------------------------------------------------------//
		/*!
			@brief	リピート・サイクルの設定
			@param[in]	frame	フレーム数
		*/
		//-----------------------------------------------------------------//
		void repeat_cycle(uint32_t frame) { repeat_cycle_ = frame; }


		//-----------------------------------------------------------------//
		/*!
			@brief	サービス
		*/
		//-----------------------------------------------------------------//
		void service();


		//-----------------------------------------------------------------//
		/*!
			@brief	入力
			@return 入力されたキーの値
		*/
		//-----------------------------------------------------------------//
		const std::string& input() const { return input_; }
	};

}

