#ifndef GALLOC_HPP
#define GALLOC_HPP
//=====================================================================//
/*!	@file
	@brief	グローバル・アロケーター（ヘッダー）
			new, delete, new[], delete[] オペレーターのオーバーロード
	@author	平松邦仁 (hira@rvf-rc45.net) 
*/
//=====================================================================//
#include "bxmm.h"
#include <iostream>

#ifndef NDEBUG
void global_check_map();
#endif

//-----------------------------------------------------------------//
/*!
	@brief	グローバル、記憶ブロックの作成
 */
//-----------------------------------------------------------------//
void global_memory_create();


//-----------------------------------------------------------------//
/*!
	@brief	グローバル、記憶ブロックの取得
	@return グローバル記憶ブロック、BXMM 構造体のポインター
 */
//-----------------------------------------------------------------//
BXMM* global_memory_get();

#ifndef NDEBUG
//-----------------------------------------------------------------//
/*!
	@brief	グローバル、記憶ブロックにキー設定
	@param[in]	key	設定するキー
 */
//-----------------------------------------------------------------//
inline void global_memory_setkey(const char* key) {
	BXMM *bx = global_memory_get();
	bxmm_push_key(bx);
	bxmm_set_key(bx, key);
}
#endif

#ifndef NDEBUG
//-----------------------------------------------------------------//
/*!
	@brief	グローバル、記憶ブロックのキーをリストア
 */
//-----------------------------------------------------------------//
inline void global_memory_restorekey() {
	BXMM *bx = global_memory_get();
	bxmm_pop_key(bx);
}
#endif

//-----------------------------------------------------------------//
/*!
	@brief	グローバル、記憶ブロックの廃棄
 */
//-----------------------------------------------------------------//
void global_memory_destroy();


//-----------------------------------------------------------------//
/*!
	@brief	記憶管理ブロックを作成する。
	@param[in]	key		記憶管理テーブルの識別キー
	@param[in]	size	記憶割り当てブロックのサイズ（バイト）
	@param[in]	align	記憶管理ブロックの最小アライメントサイズ（バイト）
	@return	記憶管理テーブル構造体のポインター
 */
//-----------------------------------------------------------------//
BXMM *memory_block_create(const char* key, size_t size, size_t align);


//-----------------------------------------------------------------//
/*!
	@brief	記憶管理ブロックを廃棄する。
	@param[in]	bx		記憶管理テーブル構造体のポインター
 */
//-----------------------------------------------------------------//
void memory_block_destroy(BXMM *bx);


//-----------------------------------------------------------------//
/*!
	@brief	グローバル new オペレーターのオーバーロード
	@param[in]	n	獲得するサイズ
	@return	獲得したメモリーのポインター
 */
//-----------------------------------------------------------------//
void* operator new(std::size_t n) throw();


//-----------------------------------------------------------------//
/*!
	@brief	グローバル delete オペレーターのオーバーロード
	@param[in]	p	開放するメモリーのポインター
 */
//-----------------------------------------------------------------//
void operator delete(void* p) throw();


//-----------------------------------------------------------------//
/*!
	@brief	グローバル new[] オペレーターのオーバーロード
	@param[in]	n	獲得するサイズ
	@return	獲得したメモリーのポインター
 */
//-----------------------------------------------------------------//
void* operator new[](std::size_t n) throw();


//-----------------------------------------------------------------//
/*!
	@brief	グローバル delete[] オペレーターのオーバーロード
	@param[in]	p	開放するメモリーのポインター
 */
//-----------------------------------------------------------------//
void operator delete[](void* p) throw();


//-----------------------------------------------------------------//
/*!
	@brief	グローバル記憶管理のダミー
 */
//-----------------------------------------------------------------//
class galloc {
public:
	galloc() {
		std::cout << "--------------------------------" << std::endl;
		std::cout << "----- Start, global allocator..." << std::endl;
	}
	~galloc() {
		std::cout << "----- Close, global allocator..." << std::endl;
		std::cout << "--------------------------------" << std::endl;
	}
};

#endif	// GALLOC_HPP
