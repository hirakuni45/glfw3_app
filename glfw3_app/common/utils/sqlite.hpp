#ifndef SQLITE_HPP
#define SQLITE_HPP
//=====================================================================//
/*!	@file
	@brief	SQLite3 ラッパー・クラス（ヘッダー）
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <vector>
#include <stdlib.h>
#include <sqlite3.h>

namespace sys {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	SQLLite3 ラッパー・クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class sqlite {

		sqlite3*	m_db;

		typedef std::vector<sqlite3_stmt*> db_stmts;
		typedef std::vector<sqlite3_stmt*>::iterator db_stmts_it;
		typedef std::vector<sqlite3_stmt*>::const_iterator db_stmts_cit;

		db_stmts	m_db_stmts;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		sqlite() : m_db(NULL) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~sqlite() { destroy(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	初期化
		 */
		//-----------------------------------------------------------------//
		void initialize();


		//-----------------------------------------------------------------//
		/*!
			@brief	データベースファイルの適正を検査
			@param[in]	dbname	データベース名
			@return 成功なら「true」
		 */
		//-----------------------------------------------------------------//
		bool probe(const char* dbname);


		//-----------------------------------------------------------------//
		/*!
			@brief	データベースを開く
			@param[in]	dbname	データベース名
			@return 成功なら「true」
		 */
		//-----------------------------------------------------------------//
		bool open(const char* dbname);


		//-----------------------------------------------------------------//
		/*!
			@brief	データベースを閉じる
		 */
		//-----------------------------------------------------------------//
		void close();


		//-----------------------------------------------------------------//
		/*!
			@brief	エラーメッセージを返す
			@return エラーメッセージ（UTF-8）のポインター
		 */
		//-----------------------------------------------------------------//
		const char* error_message() const { return sqlite3_errmsg(m_db); }


		//-----------------------------------------------------------------//
		/*!
			@brief	SQL コマンドを発行
			@param[in]	command コマンド
			@return 正常なら「true」
		 */
		//-----------------------------------------------------------------//
		bool command(const char* command);


		//-----------------------------------------------------------------//
		/*!
			@brief	SQL ステートメントをコンパイル
			@param[in]	statement	ステートメントコード
			@return ステートメントのハンドル
		 */
		//-----------------------------------------------------------------//
		int prepare(const char* statement);


		//-----------------------------------------------------------------//
		/*!
			@brief	SQL ステートメントを実行
			@param[in]	handle	ステートメントのハンドル
			@return 成功なら「true」
		 */
		//-----------------------------------------------------------------//
		bool step(int handle);


		//-----------------------------------------------------------------//
		/*!
			@brief	SQL ステートメントのファイナライズ
			@param[in]	handle	ステートメントのハンドル
		 */
		//-----------------------------------------------------------------//
		void finalize(int handle);


		//-----------------------------------------------------------------//
		/*!
			@brief	廃棄
		 */
		//-----------------------------------------------------------------//
		void destroy();

	};

}
#endif
