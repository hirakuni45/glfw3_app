#pragma once
//=====================================================================//
/*!	@file
	@brief	MP3 ID3 TAG クラス（ヘッダー）@n
			libid3tag を利用
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <string>
#include <id3tag.h>
#include "utils/file_io.hpp"
#include "img_io/i_img.hpp"
#include "img_io/jpeg_io.hpp"
#include "img_io/png_io.hpp"

namespace mp3 {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	MP3 ID3 TAG クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class mp3_tag {

	public:
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	ID3 フレーム・タイプ
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		struct id3_t {
			enum type {
				none,
				album,
				title,
				artist,
				content,
				track,
				disc,
				release_year,
				artist2,

				limit_
			};
		};

	private:
		bool			open_;

		id3_file*		id3_file_;
		id3_tag*		id3_tag_;
		id3_field_textencoding	text_code_;

		img::jpeg_io	jpegio_;
		img::png_io		pngio_;

		id3_t::type		frame_t_;
		std::string		text_[id3_t::limit_];

		uint32_t		skip_head_;

		uint32_t		value_;

		id3_byte_t		apic_string_[4];
		id3_length_t	apic_string_len_;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		mp3_tag() : open_(false), id3_file_(0), frame_t_(id3_t::none),
			skip_head_(0), value_(0) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~mp3_tag() { destroy(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	初期化
		*/
		//-----------------------------------------------------------------//
		void initialize();


		//-----------------------------------------------------------------//
		/*!
			@brief	オープン
			@param[in]	fin	ファイル入力
			@return 成功なら「true」が返る
		*/
		//-----------------------------------------------------------------//
		bool open(utils::file_io& fin);


		//-----------------------------------------------------------------//
		/*!
			@brief	オープン
			@param[in]	filename	ファイル名
			@return 成功なら「true」が返る
		*/
		//-----------------------------------------------------------------//
		bool open(const std::string& filename) {
			utils::file_io fin;
			fin.open(filename, "rb");
			bool f = open(fin);
			fin.close();
			return f;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	TAG 内の全てのフレームをパース
			@return 成功なら「true」が返る
		*/
		//-----------------------------------------------------------------//
		bool decode();


		//-----------------------------------------------------------------//
		/*!
			@brief	TAG 内の画像インターフェースを取得する
			@return 画像インターフェース
		*/
		//-----------------------------------------------------------------//
		const img::i_img* get_image_if() const {
			if(open_) {
				const img::i_img* p = jpegio_.get_image_if();
				if(p) return p;
				else {
					p = pngio_.get_image_if();
					if(p) return p;
				}
			}
			return 0;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	TAG のフレーム情報を得る
			@param[in]	type	フレーム情報種別
			@return 文字情報
		*/
		//-----------------------------------------------------------------//
		const std::string& get_text(id3_t::type type) const {
			if(type < id3_t::limit_) {
				return text_[type];
			} else {
				static std::string tmp;
				return tmp;
			}
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	TAG 領域のオフセットを得る
			@return オフセット値
		*/
		//-----------------------------------------------------------------//
		uint32_t get_skip_head() const { return skip_head_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	クローズ
		*/
		//-----------------------------------------------------------------//
		void close();


		//-----------------------------------------------------------------//
		/*!
			@brief	廃棄
		*/
		//-----------------------------------------------------------------//
		void destroy();

	};

}
