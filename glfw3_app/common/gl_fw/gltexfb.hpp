#pragma once
//=====================================================================//
/*!	@file
	@brief	OpenGL テクスチャー・フレーム・バッファ・クラス（ヘッダー）@n
			テクスチャーを２枚初期化して、それをダブルバッファとして@n
			使い、ビットマップの動画表示などを行う。@n
			24(RGB)、32(RGBA) ビットの表示モードに対応。
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include "gl_fw/gl_info.hpp"
#include "utils/vtx.hpp"

namespace gl {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	texfb クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	struct texfb {
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	レンダリングのソースフォーマット
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		struct image {
			enum type {
				INDEXED,	///< 8 ビットのインデックスドカラー
				GRAY,		///< 8 ビットのグレースケール
				RGBA4444,	///< RGBA4444 16 ビットカラー画像
				RGB,		///< RGB 24 ビットカラー画像
				RGBA,		///< RGBA 32 ビットカラー画像
				BGR,		///< BGR 24 ビットカラー画像（BGR オーダー）
			};
		};

	private:
		uint32_t	frame_count_;

		int			disp_page_;
		GLuint		tex_type_;
		int			tex_depth_;

		vtx::ipos	disp_start_;
		vtx::ipos	disp_size_;
		vtx::ipos	tex_size_;

		struct tex_page {
			union {
				GLuint	ids_[2];
				struct {
					GLuint	fore_;
					GLuint	back_;
				};
			};
			tex_page(GLuint fore, GLuint back) : fore_(fore), back_(back) { }
			tex_page() { }
		};
		tex_page	tex_id_;

		bool	h_flip_;
		bool	v_flip_;

		void draw_quad_(GLuint tex_id);
		void destroy_();

	public:
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	設定エラーコード一覧
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		struct error {
			enum type {
				ERROR_NONE = 0,			///< エラー無し
				ERROR_WIDTH_OVER = 1,	///< 設定できるテクスチャーの横幅を超えた
				ERROR_HEIGHT_OVER,		///< 設定できるテクスチャーの高さを超えた
				ERROR_DEPTH,			///< 設定できるテクスチャーの色深度が無い
			};
		};


		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		texfb() : frame_count_(0),
			disp_page_(0), tex_type_(0), tex_depth_(0),
			disp_start_(0, 0), disp_size_(0, 0), tex_size_(0, 0),
			tex_id_(0, 0),
			h_flip_(false), v_flip_(false)
		{ }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~texfb() { destroy_(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	テクスチャー・フレーム・バッファの設定
			@param[in]	width	フレーム・バッファの横幅（最大５１２）
			@param[in]	height	フレーム・バッファの高さ（最大５１２）
			@param[in]	depth	フレーム・バッファの色深度（１６、２４、３２）
			@return				成功すると、TEXFB_ERROR_NONE が返る
							それ以外の場合はエラー
		*/
		//-----------------------------------------------------------------//
		error::type initialize(int width, int height, int depth);


		//-----------------------------------------------------------------//
		/*!
			@brief	モーション・オブジェクト描画用マトリックスの設定
			@param[in]	x	開始位置 X
			@param[in]	y	開始位置 Y
			@param[in]	w	横幅の指定
			@param[in]	h	高さの指定
			@param[in]	zn	Z (手前)
			@param[in]	zf	Z (奥)
		 */
		//-----------------------------------------------------------------//
		void setup_matrix(int x, int y, int w, int h, float zn = -1.0f, float zf = 1.0f);


		//-----------------------------------------------------------------//
		/*!
			@brief		フレームバッファのの表示開始位置指定
			@param[in]	size	表示開始位置
		*/
		//-----------------------------------------------------------------//
		void set_disp_start(const vtx::ipos& start) { disp_start_ = start; }


		//-----------------------------------------------------------------//
		/*!
			@brief		フレームバッファの表示サイズ指定
			@param[in]	size	表示サイズ
		*/
		//-----------------------------------------------------------------//
		void set_disp_size(const vtx::ipos& size) {
			int width = size.x;
			int height = size.y;
#if 0
			int tw, th;
			if(width <= 64) tw = 64;
			else if(width <= 128) tw = 128;
			else if(width <= 256) tw = 256;
			else tw = 512;
			if(height <= 64) th = 64;
			else if(height <= 128) th = 128;
			else if(height <= 256) th = 256;
			else th = 512;
#endif
			disp_size_.set(width, height);
//			tex_size_.set(tw, th);
		}



		//-----------------------------------------------------------------//
		/*!
			@brief		反転画像の設定
			@param[in]	hf	「true」なら水平反転
			@param[in]	vf	「true」なら垂直変転
		*/
		//-----------------------------------------------------------------//
		void set_flip(bool hf, bool vf) { h_flip_ = hf; v_flip_ = vf; }


		//-----------------------------------------------------------------//
		/*!
			@brief		テクスチャー・フレーム・バッファ・サービス@n
						※OpenGL 描画ループの中で、毎フレーム呼ぶ事
		*/
		//-----------------------------------------------------------------//
		void draw();


		//-----------------------------------------------------------------//
		/*!
			@brief		テクスチャー・フレーム・バッファ・ページ・フリップ@n
						※このフレームの次のフレームで表示される。
			@param[in]	scale	描画するテクスチャーポリゴンの表示スケール
		*/
		//-----------------------------------------------------------------//
		void flip();


		//-----------------------------------------------------------------//
		/*!
			@brief		テクスチャー・フレーム・バッファ・レンダリング
			@param[in]	srct	ソース・イメージのタイプ（RGB、RGBA、BGR）
			@param[in]	img		ソース・イメージのポインター
			@param[in]	alpha	24 -> 32 ビットフォーマット変換時のアルファ値
		*/
		//-----------------------------------------------------------------//
		void rendering(image::type srct, const char* img, int alpha = 255);


		//-----------------------------------------------------------------//
		/*!
			@brief		フレーム・バッファの横幅を得る
			@return		フレーム・バッファの横幅
		*/
		//-----------------------------------------------------------------//
		const vtx::ipos& get_size() const { return tex_size_; };


		//-----------------------------------------------------------------//
		/*!
			@brief		フレーム・バッファの色深度を得る
			@return		フレーム・バッファの色深度
		*/
		//-----------------------------------------------------------------//
		int get_depth() const { return tex_depth_; };


		//-----------------------------------------------------------------//
		/*!
			@brief		フレーム・カウント数を得る
			@return		フレーム・カウント数
		*/
		//-----------------------------------------------------------------//
		uint32_t get_frame_count() const { return frame_count_; };

	};

}
