#pragma once
//=====================================================================//
/*!	@file
	@brief	デバイスレコーダー（ヘッダー）
    @author 平松邦仁 (hira@rvf-rc45.net)
	@copyright	Copyright (C) 2017 Kunihito Hiramatsu @n
				Released under the MIT license @n
				https://github.com/hirakuni45/glfw3_app/blob/master/LICENSE
*/
//=====================================================================//
#include "core/device.hpp"
#include "utils/file_io.hpp"

namespace gl {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	デバイスレコーダークラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class devrec {

	public:
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	記録パッド、構造体
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		struct rec_pad {
		};

	private:
		std::vector<rec_pad>	record_;
		uint32_t				get_pos_;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		devrec() : get_pos_(0) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~devrec() { }


		//-----------------------------------------------------------------//
		/*!
			@brief	消去
		*/
		//-----------------------------------------------------------------//
		void clear() { record_.clear(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	記録
			@param[in]	pad	レコード・パッド
		*/
		//-----------------------------------------------------------------//
		void put(const rec_pad& pad) {
			record_.push_back(pad);
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	取得
			@param[out]	pad	レコード・パッド
			@return レコードが有効な場合「true」
		*/
		//-----------------------------------------------------------------//
		bool get(rec_pad& pad) {
			if(get_pos_ < record_.size()) {
				pad = record_[get_pos_];
				++get_pos_;
				return true;
			} else {
				return false;
			}
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	サイズを得る
			@return 配列のサイズ
		*/
		//-----------------------------------------------------------------//
		uint32_t size() const { return record_.size(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	レコードのロード
			@param[in]	fin コンテキスト
			@return 成功なら「true」
		 */
		//-----------------------------------------------------------------//
		bool load(utils::file_io& fin);


		//-----------------------------------------------------------------//
		/*!
			@brief	レコードのセーブ
			@param[in]	fout コンテキスト
			@return 成功なら「true」
		*/
		//-----------------------------------------------------------------//
		bool save(utils::file_io& fout);
	};
}
