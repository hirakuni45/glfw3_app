#pragma once
//=====================================================================//
/*!	@file
	@brief	OpenGL ターミナル・クラス（ヘッダー）
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <vector>
#include "gl_fw/IGLcore.hpp"
#include "img_io/img.hpp"
#include "utils/vtx.hpp"
#include "utils/string_utils.hpp"

namespace gl {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	terminal クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class terminal {

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	アトリビュート
		*/
		//-----------------------------------------------------------------//
		struct attribute {
			enum type {
				normal,		///< ノーマル
				inverse,	///< 反転
				blink,		///< 点滅
			};
		};

	private:
		struct code {
			uint16_t	cha;
			img::rgba8		fore_color;
			img::rgba8		back_color;
			attribute::type	atr;
		};

		typedef std::vector<code>					codes;
		typedef std::vector<code>::iterator			codes_it;
		typedef std::vector<code>::const_iterator	codes_cit;

		codes	buff_;

		img::rgba8	fore_color_;
		img::rgba8	back_color_;

		vtx::ipos	cursor_pos_;
		vtx::ipos	limit_pos_;
		vtx::ipos	font_size_;

		attribute::type	attribute_;

		uint32_t	frame_count_;

		bool	scroll_;
		bool	cursor_;
		bool	proportional_;

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		terminal() : fore_color_(255, 255, 255, 255), back_color_(0, 0, 0, 255),
					   cursor_pos_(0), limit_pos_(0), font_size_(24, 24),
					   attribute_(attribute::normal), frame_count_(0),
					   scroll_(true), cursor_(true), proportional_(false) { }


		//-----------------------------------------------------------------//
		/*!
			@brief	デストラクター
		*/
		//-----------------------------------------------------------------//
		~terminal() { destroy(); }


		//-----------------------------------------------------------------//
		/*!
			@brief	初期化
			@param[in]	w	横幅
			@param[in]	h	高さ
		 */
		//-----------------------------------------------------------------//
		void initialize(int w, int h);


		//-----------------------------------------------------------------//
		/*!
			@brief	リサイズ
			@param[in]	w	横幅
			@param[in]	h	高さ
		*/
		//-----------------------------------------------------------------//
		void resize(int w, int h);


		//-----------------------------------------------------------------//
		/*!
			@brief	画面消去
		*/
		//-----------------------------------------------------------------//
		void clear();


		//-----------------------------------------------------------------//
		/*!
			@brief	スクロール
		*/
		//-----------------------------------------------------------------//
		void scroll();


		//-----------------------------------------------------------------//
		/*!
			@brief	文字出力
			@param[in]	ch	UTF-16 文字コード
		*/
		//-----------------------------------------------------------------//
		void put(uint16_t ch);


		//-----------------------------------------------------------------//
		/*!
			@brief	文字出力
			@param[in]	st	UTF-16 文字コードのポインター
		*/
		//-----------------------------------------------------------------//
		void puts(const utils::wstring& st) {
			char16_t ch;
			const char16_t* p = st.c_str();
			while((ch = *p++) != 0) {
				put(ch);
			}
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	レンダリングサービス
		*/
		//-----------------------------------------------------------------//
		void service();


		//-----------------------------------------------------------------//
		/*!
			@brief	廃棄
		*/
		//-----------------------------------------------------------------//
		void destroy();


		//-----------------------------------------------------------------//
		/*!
			@brief	文字の色を設定
			@param[in]	c	カラー
		*/
		//-----------------------------------------------------------------//
		void set_fore_color(const img::rgba8& c) { fore_color_ = c; }


		//-----------------------------------------------------------------//
		/*!
			@brief	文字の背景色を設定
			@param[in]	c	カラー
		*/
		//-----------------------------------------------------------------//
		void set_back_color(const img::rgba8& c) { back_color_ = c; }


		//-----------------------------------------------------------------//
		/*!
			@brief	アトリビュートを設定
			@param[in]	atr	アトリビュート・タイプ
		*/
		//-----------------------------------------------------------------//
		void set_attribute(const attribute::type atr) { attribute_ = atr; }


		//-----------------------------------------------------------------//
		/*!
			@brief	スクロールを設定
			@param[in]	flag	「false」を設定するとスクロール禁止
		*/
		//-----------------------------------------------------------------//
		void enable_scroll(bool flag = true) { scroll_ = flag; }


		//-----------------------------------------------------------------//
		/*!
			@brief	カーソル表示の On/Off
			@param[in]	flag	「false」を設定するとカーソル表示禁止
		*/
		//-----------------------------------------------------------------//
		void enable_cursor(bool flag = true) { cursor_ = flag; }


		//-----------------------------------------------------------------//
		/*!
			@brief	プロポーショナル制御の On/Off
			@param[in]	flag	「false」なら等幅
		*/
		//-----------------------------------------------------------------//
		void enable_proportional(bool flag = true) { proportional_ = flag; }


		//-----------------------------------------------------------------//
		/*!
			@brief	スクリーンの横幅を得る
			@return	スクリーンの横幅ピクセル数
		*/
		//-----------------------------------------------------------------//
		int get_screen_width() const { return font_size_.x * limit_pos_.x; }


		//-----------------------------------------------------------------//
		/*!
			@brief	スクリーンの高さを得る
			@return	スクリーンの高さピクセル数
		*/
		//-----------------------------------------------------------------//
		int get_screen_height() const { return font_size_.y * limit_pos_.y; }


	};

}
